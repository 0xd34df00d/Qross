//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QRectF")]
    public partial class QRectF : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QRectF(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QRectF), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QRectF() {
            staticInterceptor = new SmokeInvocation(typeof(QRectF), null);
        }
        public QRectF() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRectF", "QRectF()", typeof(void));
        }
        public QRectF(QPointF topleft, QSizeF size) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRectF##", "QRectF(const QPointF&, const QSizeF&)", typeof(void), typeof(QPointF), topleft, typeof(QSizeF), size);
        }
        public QRectF(QPointF topleft, QPointF bottomRight) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRectF##", "QRectF(const QPointF&, const QPointF&)", typeof(void), typeof(QPointF), topleft, typeof(QPointF), bottomRight);
        }
        public QRectF(double left, double top, double width, double height) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRectF$$$$", "QRectF(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), left, typeof(double), top, typeof(double), width, typeof(double), height);
        }
        public QRectF(QRect rect) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRectF#", "QRectF(const QRect&)", typeof(void), typeof(QRect), rect);
        }
        public bool IsNull() {
            return (bool) interceptor.Invoke("isNull", "isNull() const", typeof(bool));
        }
        public bool IsEmpty() {
            return (bool) interceptor.Invoke("isEmpty", "isEmpty() const", typeof(bool));
        }
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public QRectF Normalized() {
            return (QRectF) interceptor.Invoke("normalized", "normalized() const", typeof(QRectF));
        }
        public double Left() {
            return (double) interceptor.Invoke("left", "left() const", typeof(double));
        }
        public double Top() {
            return (double) interceptor.Invoke("top", "top() const", typeof(double));
        }
        public double Right() {
            return (double) interceptor.Invoke("right", "right() const", typeof(double));
        }
        public double Bottom() {
            return (double) interceptor.Invoke("bottom", "bottom() const", typeof(double));
        }
        public double X() {
            return (double) interceptor.Invoke("x", "x() const", typeof(double));
        }
        public double Y() {
            return (double) interceptor.Invoke("y", "y() const", typeof(double));
        }
        public void SetLeft(double pos) {
            interceptor.Invoke("setLeft$", "setLeft(qreal)", typeof(void), typeof(double), pos);
        }
        public void SetTop(double pos) {
            interceptor.Invoke("setTop$", "setTop(qreal)", typeof(void), typeof(double), pos);
        }
        public void SetRight(double pos) {
            interceptor.Invoke("setRight$", "setRight(qreal)", typeof(void), typeof(double), pos);
        }
        public void SetBottom(double pos) {
            interceptor.Invoke("setBottom$", "setBottom(qreal)", typeof(void), typeof(double), pos);
        }
        public void SetX(double pos) {
            interceptor.Invoke("setX$", "setX(qreal)", typeof(void), typeof(double), pos);
        }
        public void SetY(double pos) {
            interceptor.Invoke("setY$", "setY(qreal)", typeof(void), typeof(double), pos);
        }
        public QPointF TopLeft() {
            return (QPointF) interceptor.Invoke("topLeft", "topLeft() const", typeof(QPointF));
        }
        public QPointF BottomRight() {
            return (QPointF) interceptor.Invoke("bottomRight", "bottomRight() const", typeof(QPointF));
        }
        public QPointF TopRight() {
            return (QPointF) interceptor.Invoke("topRight", "topRight() const", typeof(QPointF));
        }
        public QPointF BottomLeft() {
            return (QPointF) interceptor.Invoke("bottomLeft", "bottomLeft() const", typeof(QPointF));
        }
        public QPointF Center() {
            return (QPointF) interceptor.Invoke("center", "center() const", typeof(QPointF));
        }
        public void SetTopLeft(QPointF p) {
            interceptor.Invoke("setTopLeft#", "setTopLeft(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void SetBottomRight(QPointF p) {
            interceptor.Invoke("setBottomRight#", "setBottomRight(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void SetTopRight(QPointF p) {
            interceptor.Invoke("setTopRight#", "setTopRight(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void SetBottomLeft(QPointF p) {
            interceptor.Invoke("setBottomLeft#", "setBottomLeft(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void MoveLeft(double pos) {
            interceptor.Invoke("moveLeft$", "moveLeft(qreal)", typeof(void), typeof(double), pos);
        }
        public void MoveTop(double pos) {
            interceptor.Invoke("moveTop$", "moveTop(qreal)", typeof(void), typeof(double), pos);
        }
        public void MoveRight(double pos) {
            interceptor.Invoke("moveRight$", "moveRight(qreal)", typeof(void), typeof(double), pos);
        }
        public void MoveBottom(double pos) {
            interceptor.Invoke("moveBottom$", "moveBottom(qreal)", typeof(void), typeof(double), pos);
        }
        public void MoveTopLeft(QPointF p) {
            interceptor.Invoke("moveTopLeft#", "moveTopLeft(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void MoveBottomRight(QPointF p) {
            interceptor.Invoke("moveBottomRight#", "moveBottomRight(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void MoveTopRight(QPointF p) {
            interceptor.Invoke("moveTopRight#", "moveTopRight(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void MoveBottomLeft(QPointF p) {
            interceptor.Invoke("moveBottomLeft#", "moveBottomLeft(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void MoveCenter(QPointF p) {
            interceptor.Invoke("moveCenter#", "moveCenter(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void Translate(double dx, double dy) {
            interceptor.Invoke("translate$$", "translate(qreal, qreal)", typeof(void), typeof(double), dx, typeof(double), dy);
        }
        public void Translate(QPointF p) {
            interceptor.Invoke("translate#", "translate(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public QRectF Translated(double dx, double dy) {
            return (QRectF) interceptor.Invoke("translated$$", "translated(qreal, qreal) const", typeof(QRectF), typeof(double), dx, typeof(double), dy);
        }
        public QRectF Translated(QPointF p) {
            return (QRectF) interceptor.Invoke("translated#", "translated(const QPointF&) const", typeof(QRectF), typeof(QPointF), p);
        }
        public void MoveTo(double x, double t) {
            interceptor.Invoke("moveTo$$", "moveTo(qreal, qreal)", typeof(void), typeof(double), x, typeof(double), t);
        }
        public void MoveTo(QPointF p) {
            interceptor.Invoke("moveTo#", "moveTo(const QPointF&)", typeof(void), typeof(QPointF), p);
        }
        public void SetRect(double x, double y, double w, double h) {
            interceptor.Invoke("setRect$$$$", "setRect(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y, typeof(double), w, typeof(double), h);
        }
        public void GetRect(ref double x, ref double y, ref double w, ref double h) {
            StackItem[] stack = new StackItem[5];
            stack[1].s_double = x;
            stack[2].s_double = y;
            stack[3].s_double = w;
            stack[4].s_double = h;
            interceptor.Invoke("getRect$$$$", "getRect(qreal*, qreal*, qreal*, qreal*) const", stack);
            x = stack[1].s_double;
            y = stack[2].s_double;
            w = stack[3].s_double;
            h = stack[4].s_double;
            return;
        }
        public void SetCoords(double x1, double y1, double x2, double y2) {
            interceptor.Invoke("setCoords$$$$", "setCoords(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), x1, typeof(double), y1, typeof(double), x2, typeof(double), y2);
        }
        public void GetCoords(ref double x1, ref double y1, ref double x2, ref double y2) {
            StackItem[] stack = new StackItem[5];
            stack[1].s_double = x1;
            stack[2].s_double = y1;
            stack[3].s_double = x2;
            stack[4].s_double = y2;
            interceptor.Invoke("getCoords$$$$", "getCoords(qreal*, qreal*, qreal*, qreal*) const", stack);
            x1 = stack[1].s_double;
            y1 = stack[2].s_double;
            x2 = stack[3].s_double;
            y2 = stack[4].s_double;
            return;
        }
        public void Adjust(double x1, double y1, double x2, double y2) {
            interceptor.Invoke("adjust$$$$", "adjust(qreal, qreal, qreal, qreal)", typeof(void), typeof(double), x1, typeof(double), y1, typeof(double), x2, typeof(double), y2);
        }
        public QRectF Adjusted(double x1, double y1, double x2, double y2) {
            return (QRectF) interceptor.Invoke("adjusted$$$$", "adjusted(qreal, qreal, qreal, qreal) const", typeof(QRectF), typeof(double), x1, typeof(double), y1, typeof(double), x2, typeof(double), y2);
        }
        public QSizeF Size() {
            return (QSizeF) interceptor.Invoke("size", "size() const", typeof(QSizeF));
        }
        public double Width() {
            return (double) interceptor.Invoke("width", "width() const", typeof(double));
        }
        public double Height() {
            return (double) interceptor.Invoke("height", "height() const", typeof(double));
        }
        public void SetWidth(double w) {
            interceptor.Invoke("setWidth$", "setWidth(qreal)", typeof(void), typeof(double), w);
        }
        public void SetHeight(double h) {
            interceptor.Invoke("setHeight$", "setHeight(qreal)", typeof(void), typeof(double), h);
        }
        public void SetSize(QSizeF s) {
            interceptor.Invoke("setSize#", "setSize(const QSizeF&)", typeof(void), typeof(QSizeF), s);
        }
        public bool Contains(QPointF p) {
            return (bool) interceptor.Invoke("contains#", "contains(const QPointF&) const", typeof(bool), typeof(QPointF), p);
        }
        public bool Contains(double x, double y) {
            return (bool) interceptor.Invoke("contains$$", "contains(qreal, qreal) const", typeof(bool), typeof(double), x, typeof(double), y);
        }
        public bool Contains(QRectF r) {
            return (bool) interceptor.Invoke("contains#", "contains(const QRectF&) const", typeof(bool), typeof(QRectF), r);
        }
        public QRectF Unite(QRectF r) {
            return (QRectF) interceptor.Invoke("unite#", "unite(const QRectF&) const", typeof(QRectF), typeof(QRectF), r);
        }
        public QRectF United(QRectF other) {
            return (QRectF) interceptor.Invoke("united#", "united(const QRectF&) const", typeof(QRectF), typeof(QRectF), other);
        }
        public QRectF Intersect(QRectF r) {
            return (QRectF) interceptor.Invoke("intersect#", "intersect(const QRectF&) const", typeof(QRectF), typeof(QRectF), r);
        }
        public QRectF Intersected(QRectF other) {
            return (QRectF) interceptor.Invoke("intersected#", "intersected(const QRectF&) const", typeof(QRectF), typeof(QRectF), other);
        }
        public bool Intersects(QRectF r) {
            return (bool) interceptor.Invoke("intersects#", "intersects(const QRectF&) const", typeof(bool), typeof(QRectF), r);
        }
        public QRect ToRect() {
            return (QRect) interceptor.Invoke("toRect", "toRect() const", typeof(QRect));
        }
        public QRect ToAlignedRect() {
            return (QRect) interceptor.Invoke("toAlignedRect", "toAlignedRect() const", typeof(QRect));
        }
        ~QRectF() {
            interceptor.Invoke("~QRectF", "~QRectF()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QRectF", "~QRectF()", typeof(void));
        }
        public override bool Equals(object o) {
            if (!(o is QRectF)) { return false; }
            return this == (QRectF) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public static QRectF operator|(QRectF lhs, QRectF r) {
            return (QRectF) staticInterceptor.Invoke("operator|#", "operator|(const QRectF&) const", typeof(QRectF), typeof(QRectF), lhs, typeof(QRectF), r);
        }
        public static QRectF operator&(QRectF lhs, QRectF r) {
            return (QRectF) staticInterceptor.Invoke("operator&#", "operator&(const QRectF&) const", typeof(QRectF), typeof(QRectF), lhs, typeof(QRectF), r);
        }
        public static bool operator==(QRectF arg1, QRectF arg2) {
            return (bool) staticInterceptor.Invoke("operator==##", "operator==(const QRectF&, const QRectF&)", typeof(bool), typeof(QRectF), arg1, typeof(QRectF), arg2);
        }
        public static bool operator!=(QRectF arg1, QRectF arg2) {
            return !(bool) staticInterceptor.Invoke("operator==##", "operator==(const QRectF&, const QRectF&)", typeof(bool), typeof(QRectF), arg1, typeof(QRectF), arg2);
        }
    }
}
