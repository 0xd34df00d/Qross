//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QMetaClassInfo")]
    public class QMetaClassInfo : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QMetaClassInfo(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QMetaClassInfo), this);
        }
        public QMetaClassInfo() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QMetaClassInfo", "QMetaClassInfo()", typeof(void));
        }
        public string Name() {
            return (string) interceptor.Invoke("name", "name() const", typeof(string));
        }
        public string Value() {
            return (string) interceptor.Invoke("value", "value() const", typeof(string));
        }
        public QMetaObject EnclosingMetaObject() {
            return (QMetaObject) interceptor.Invoke("enclosingMetaObject", "enclosingMetaObject() const", typeof(QMetaObject));
        }
        ~QMetaClassInfo() {
            interceptor.Invoke("~QMetaClassInfo", "~QMetaClassInfo()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QMetaClassInfo", "~QMetaClassInfo()", typeof(void));
        }
    }
}
