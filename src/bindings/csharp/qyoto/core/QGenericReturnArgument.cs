//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGenericReturnArgument")]
    public class QGenericReturnArgument : QGenericArgument, IDisposable {
        protected QGenericReturnArgument(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGenericReturnArgument), this);
        }
        // QGenericReturnArgument* QGenericReturnArgument(const char* arg1,void* arg2); >>>> NOT CONVERTED
        public QGenericReturnArgument(string aName) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGenericReturnArgument$", "QGenericReturnArgument(const char*)", typeof(void), typeof(string), aName);
        }
        public QGenericReturnArgument() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGenericReturnArgument", "QGenericReturnArgument()", typeof(void));
        }
        ~QGenericReturnArgument() {
            interceptor.Invoke("~QGenericReturnArgument", "~QGenericReturnArgument()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGenericReturnArgument", "~QGenericReturnArgument()", typeof(void));
        }
    }
}
