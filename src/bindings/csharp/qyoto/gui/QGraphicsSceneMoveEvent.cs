//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsSceneMoveEvent")]
    public class QGraphicsSceneMoveEvent : QGraphicsSceneEvent, IDisposable {
        protected QGraphicsSceneMoveEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsSceneMoveEvent), this);
        }
        public QGraphicsSceneMoveEvent() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsSceneMoveEvent", "QGraphicsSceneMoveEvent()", typeof(void));
        }
        public QPointF OldPos() {
            return (QPointF) interceptor.Invoke("oldPos", "oldPos() const", typeof(QPointF));
        }
        public void SetOldPos(QPointF pos) {
            interceptor.Invoke("setOldPos#", "setOldPos(const QPointF&)", typeof(void), typeof(QPointF), pos);
        }
        public QPointF NewPos() {
            return (QPointF) interceptor.Invoke("newPos", "newPos() const", typeof(QPointF));
        }
        public void SetNewPos(QPointF pos) {
            interceptor.Invoke("setNewPos#", "setNewPos(const QPointF&)", typeof(void), typeof(QPointF), pos);
        }
        ~QGraphicsSceneMoveEvent() {
            interceptor.Invoke("~QGraphicsSceneMoveEvent", "~QGraphicsSceneMoveEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsSceneMoveEvent", "~QGraphicsSceneMoveEvent()", typeof(void));
        }
    }
}
