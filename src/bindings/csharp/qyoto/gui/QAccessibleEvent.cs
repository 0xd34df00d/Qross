//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QAccessibleEvent")]
    public class QAccessibleEvent : QEvent, IDisposable {
        protected QAccessibleEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAccessibleEvent), this);
        }
        public QAccessibleEvent(QEvent.TypeOf type, int child) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAccessibleEvent$$", "QAccessibleEvent(QEvent::Type, int)", typeof(void), typeof(QEvent.TypeOf), type, typeof(int), child);
        }
        public int Child() {
            return (int) interceptor.Invoke("child", "child() const", typeof(int));
        }
        public string Value() {
            return (string) interceptor.Invoke("value", "value() const", typeof(string));
        }
        public void SetValue(string aText) {
            interceptor.Invoke("setValue$", "setValue(const QString&)", typeof(void), typeof(string), aText);
        }
        ~QAccessibleEvent() {
            interceptor.Invoke("~QAccessibleEvent", "~QAccessibleEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QAccessibleEvent", "~QAccessibleEvent()", typeof(void));
        }
    }
}
