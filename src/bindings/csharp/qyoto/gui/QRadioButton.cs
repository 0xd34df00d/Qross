//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QRadioButton")]
    public class QRadioButton : QAbstractButton, IDisposable {
        protected QRadioButton(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QRadioButton), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QRadioButton() {
            staticInterceptor = new SmokeInvocation(typeof(QRadioButton), null);
        }
        public QRadioButton(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRadioButton#", "QRadioButton(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QRadioButton() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRadioButton", "QRadioButton()", typeof(void));
        }
        public QRadioButton(string text, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRadioButton$#", "QRadioButton(const QString&, QWidget*)", typeof(void), typeof(string), text, typeof(QWidget), parent);
        }
        public QRadioButton(string text) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QRadioButton$", "QRadioButton(const QString&)", typeof(void), typeof(string), text);
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        [SmokeMethod("hitButton(const QPoint&) const")]
        protected override bool HitButton(QPoint arg1) {
            return (bool) interceptor.Invoke("hitButton#", "hitButton(const QPoint&) const", typeof(bool), typeof(QPoint), arg1);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent arg1) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), arg1);
        }
        [SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
        protected override void MouseMoveEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        protected void InitStyleOption(QStyleOptionButton button) {
            interceptor.Invoke("initStyleOption#", "initStyleOption(QStyleOptionButton*) const", typeof(void), typeof(QStyleOptionButton), button);
        }
        ~QRadioButton() {
            interceptor.Invoke("~QRadioButton", "~QRadioButton()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QRadioButton", "~QRadioButton()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQRadioButtonSignals Emit {
            get { return (IQRadioButtonSignals) Q_EMIT; }
        }
    }

    public interface IQRadioButtonSignals : IQAbstractButtonSignals {
    }
}
