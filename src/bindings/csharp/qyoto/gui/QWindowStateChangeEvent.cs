//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWindowStateChangeEvent")]
    public class QWindowStateChangeEvent : QEvent, IDisposable {
        protected QWindowStateChangeEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWindowStateChangeEvent), this);
        }
        public QWindowStateChangeEvent(uint aOldState) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWindowStateChangeEvent$", "QWindowStateChangeEvent(Qt::WindowStates)", typeof(void), typeof(uint), aOldState);
        }
        public QWindowStateChangeEvent(uint aOldState, bool isOverride) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWindowStateChangeEvent$$", "QWindowStateChangeEvent(Qt::WindowStates, bool)", typeof(void), typeof(uint), aOldState, typeof(bool), isOverride);
        }
        public uint OldState() {
            return (uint) interceptor.Invoke("oldState", "oldState() const", typeof(uint));
        }
        public bool IsOverride() {
            return (bool) interceptor.Invoke("isOverride", "isOverride() const", typeof(bool));
        }
        ~QWindowStateChangeEvent() {
            interceptor.Invoke("~QWindowStateChangeEvent", "~QWindowStateChangeEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QWindowStateChangeEvent", "~QWindowStateChangeEvent()", typeof(void));
        }
    }
}
