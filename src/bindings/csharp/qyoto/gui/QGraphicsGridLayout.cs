//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsGridLayout")]
    public class QGraphicsGridLayout : QGraphicsLayout, IDisposable {
        protected QGraphicsGridLayout(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsGridLayout), this);
        }
        public QGraphicsGridLayout(IQGraphicsLayoutItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsGridLayout#", "QGraphicsGridLayout(QGraphicsLayoutItem*)", typeof(void), typeof(IQGraphicsLayoutItem), parent);
        }
        public QGraphicsGridLayout() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsGridLayout", "QGraphicsGridLayout()", typeof(void));
        }
        public void AddItem(IQGraphicsLayoutItem item, int row, int column, int rowSpan, int columnSpan, uint alignment) {
            interceptor.Invoke("addItem#$$$$$", "addItem(QGraphicsLayoutItem*, int, int, int, int, Qt::Alignment)", typeof(void), typeof(IQGraphicsLayoutItem), item, typeof(int), row, typeof(int), column, typeof(int), rowSpan, typeof(int), columnSpan, typeof(uint), alignment);
        }
        public void AddItem(IQGraphicsLayoutItem item, int row, int column, int rowSpan, int columnSpan) {
            interceptor.Invoke("addItem#$$$$", "addItem(QGraphicsLayoutItem*, int, int, int, int)", typeof(void), typeof(IQGraphicsLayoutItem), item, typeof(int), row, typeof(int), column, typeof(int), rowSpan, typeof(int), columnSpan);
        }
        public void AddItem(IQGraphicsLayoutItem item, int row, int column, uint alignment) {
            interceptor.Invoke("addItem#$$$", "addItem(QGraphicsLayoutItem*, int, int, Qt::Alignment)", typeof(void), typeof(IQGraphicsLayoutItem), item, typeof(int), row, typeof(int), column, typeof(uint), alignment);
        }
        public void AddItem(IQGraphicsLayoutItem item, int row, int column) {
            interceptor.Invoke("addItem#$$", "addItem(QGraphicsLayoutItem*, int, int)", typeof(void), typeof(IQGraphicsLayoutItem), item, typeof(int), row, typeof(int), column);
        }
        public void SetHorizontalSpacing(double spacing) {
            interceptor.Invoke("setHorizontalSpacing$", "setHorizontalSpacing(qreal)", typeof(void), typeof(double), spacing);
        }
        public double HorizontalSpacing() {
            return (double) interceptor.Invoke("horizontalSpacing", "horizontalSpacing() const", typeof(double));
        }
        public void SetVerticalSpacing(double spacing) {
            interceptor.Invoke("setVerticalSpacing$", "setVerticalSpacing(qreal)", typeof(void), typeof(double), spacing);
        }
        public double VerticalSpacing() {
            return (double) interceptor.Invoke("verticalSpacing", "verticalSpacing() const", typeof(double));
        }
        public void SetSpacing(double spacing) {
            interceptor.Invoke("setSpacing$", "setSpacing(qreal)", typeof(void), typeof(double), spacing);
        }
        public void SetRowSpacing(int row, double spacing) {
            interceptor.Invoke("setRowSpacing$$", "setRowSpacing(int, qreal)", typeof(void), typeof(int), row, typeof(double), spacing);
        }
        public double RowSpacing(int row) {
            return (double) interceptor.Invoke("rowSpacing$", "rowSpacing(int) const", typeof(double), typeof(int), row);
        }
        public void SetColumnSpacing(int column, double spacing) {
            interceptor.Invoke("setColumnSpacing$$", "setColumnSpacing(int, qreal)", typeof(void), typeof(int), column, typeof(double), spacing);
        }
        public double ColumnSpacing(int column) {
            return (double) interceptor.Invoke("columnSpacing$", "columnSpacing(int) const", typeof(double), typeof(int), column);
        }
        public void SetRowStretchFactor(int row, int stretch) {
            interceptor.Invoke("setRowStretchFactor$$", "setRowStretchFactor(int, int)", typeof(void), typeof(int), row, typeof(int), stretch);
        }
        public int RowStretchFactor(int row) {
            return (int) interceptor.Invoke("rowStretchFactor$", "rowStretchFactor(int) const", typeof(int), typeof(int), row);
        }
        public void SetColumnStretchFactor(int column, int stretch) {
            interceptor.Invoke("setColumnStretchFactor$$", "setColumnStretchFactor(int, int)", typeof(void), typeof(int), column, typeof(int), stretch);
        }
        public int ColumnStretchFactor(int column) {
            return (int) interceptor.Invoke("columnStretchFactor$", "columnStretchFactor(int) const", typeof(int), typeof(int), column);
        }
        public void SetRowMinimumHeight(int row, double height) {
            interceptor.Invoke("setRowMinimumHeight$$", "setRowMinimumHeight(int, qreal)", typeof(void), typeof(int), row, typeof(double), height);
        }
        public double RowMinimumHeight(int row) {
            return (double) interceptor.Invoke("rowMinimumHeight$", "rowMinimumHeight(int) const", typeof(double), typeof(int), row);
        }
        public void SetRowPreferredHeight(int row, double height) {
            interceptor.Invoke("setRowPreferredHeight$$", "setRowPreferredHeight(int, qreal)", typeof(void), typeof(int), row, typeof(double), height);
        }
        public double RowPreferredHeight(int row) {
            return (double) interceptor.Invoke("rowPreferredHeight$", "rowPreferredHeight(int) const", typeof(double), typeof(int), row);
        }
        public void SetRowMaximumHeight(int row, double height) {
            interceptor.Invoke("setRowMaximumHeight$$", "setRowMaximumHeight(int, qreal)", typeof(void), typeof(int), row, typeof(double), height);
        }
        public double RowMaximumHeight(int row) {
            return (double) interceptor.Invoke("rowMaximumHeight$", "rowMaximumHeight(int) const", typeof(double), typeof(int), row);
        }
        public void SetRowFixedHeight(int row, double height) {
            interceptor.Invoke("setRowFixedHeight$$", "setRowFixedHeight(int, qreal)", typeof(void), typeof(int), row, typeof(double), height);
        }
        public void SetColumnMinimumWidth(int column, double width) {
            interceptor.Invoke("setColumnMinimumWidth$$", "setColumnMinimumWidth(int, qreal)", typeof(void), typeof(int), column, typeof(double), width);
        }
        public double ColumnMinimumWidth(int column) {
            return (double) interceptor.Invoke("columnMinimumWidth$", "columnMinimumWidth(int) const", typeof(double), typeof(int), column);
        }
        public void SetColumnPreferredWidth(int column, double width) {
            interceptor.Invoke("setColumnPreferredWidth$$", "setColumnPreferredWidth(int, qreal)", typeof(void), typeof(int), column, typeof(double), width);
        }
        public double ColumnPreferredWidth(int column) {
            return (double) interceptor.Invoke("columnPreferredWidth$", "columnPreferredWidth(int) const", typeof(double), typeof(int), column);
        }
        public void SetColumnMaximumWidth(int column, double width) {
            interceptor.Invoke("setColumnMaximumWidth$$", "setColumnMaximumWidth(int, qreal)", typeof(void), typeof(int), column, typeof(double), width);
        }
        public double ColumnMaximumWidth(int column) {
            return (double) interceptor.Invoke("columnMaximumWidth$", "columnMaximumWidth(int) const", typeof(double), typeof(int), column);
        }
        public void SetColumnFixedWidth(int column, double width) {
            interceptor.Invoke("setColumnFixedWidth$$", "setColumnFixedWidth(int, qreal)", typeof(void), typeof(int), column, typeof(double), width);
        }
        public void SetRowAlignment(int row, uint alignment) {
            interceptor.Invoke("setRowAlignment$$", "setRowAlignment(int, Qt::Alignment)", typeof(void), typeof(int), row, typeof(uint), alignment);
        }
        public uint RowAlignment(int row) {
            return (uint) interceptor.Invoke("rowAlignment$", "rowAlignment(int) const", typeof(uint), typeof(int), row);
        }
        public void SetColumnAlignment(int column, uint alignment) {
            interceptor.Invoke("setColumnAlignment$$", "setColumnAlignment(int, Qt::Alignment)", typeof(void), typeof(int), column, typeof(uint), alignment);
        }
        public uint ColumnAlignment(int column) {
            return (uint) interceptor.Invoke("columnAlignment$", "columnAlignment(int) const", typeof(uint), typeof(int), column);
        }
        public void SetAlignment(IQGraphicsLayoutItem item, uint alignment) {
            interceptor.Invoke("setAlignment#$", "setAlignment(QGraphicsLayoutItem*, Qt::Alignment)", typeof(void), typeof(IQGraphicsLayoutItem), item, typeof(uint), alignment);
        }
        public uint Alignment(IQGraphicsLayoutItem item) {
            return (uint) interceptor.Invoke("alignment#", "alignment(QGraphicsLayoutItem*) const", typeof(uint), typeof(IQGraphicsLayoutItem), item);
        }
        public int RowCount() {
            return (int) interceptor.Invoke("rowCount", "rowCount() const", typeof(int));
        }
        public int ColumnCount() {
            return (int) interceptor.Invoke("columnCount", "columnCount() const", typeof(int));
        }
        public IQGraphicsLayoutItem ItemAt(int row, int column) {
            return (IQGraphicsLayoutItem) interceptor.Invoke("itemAt$$", "itemAt(int, int) const", typeof(IQGraphicsLayoutItem), typeof(int), row, typeof(int), column);
        }
        [SmokeMethod("count() const")]
        public override int Count() {
            return (int) interceptor.Invoke("count", "count() const", typeof(int));
        }
        [SmokeMethod("itemAt(int) const")]
        public override IQGraphicsLayoutItem ItemAt(int index) {
            return (IQGraphicsLayoutItem) interceptor.Invoke("itemAt$", "itemAt(int) const", typeof(IQGraphicsLayoutItem), typeof(int), index);
        }
        [SmokeMethod("removeAt(int)")]
        public override void RemoveAt(int index) {
            interceptor.Invoke("removeAt$", "removeAt(int)", typeof(void), typeof(int), index);
        }
        [SmokeMethod("invalidate()")]
        public override void Invalidate() {
            interceptor.Invoke("invalidate", "invalidate()", typeof(void));
        }
        [SmokeMethod("setGeometry(const QRectF&)")]
        public override void SetGeometry(QRectF rect) {
            interceptor.Invoke("setGeometry#", "setGeometry(const QRectF&)", typeof(void), typeof(QRectF), rect);
        }
        [SmokeMethod("sizeHint(Qt::SizeHint, const QSizeF&) const")]
        public override QSizeF SizeHint(Qt.SizeHint which, QSizeF constraint) {
            return (QSizeF) interceptor.Invoke("sizeHint$#", "sizeHint(Qt::SizeHint, const QSizeF&) const", typeof(QSizeF), typeof(Qt.SizeHint), which, typeof(QSizeF), constraint);
        }
        [SmokeMethod("sizeHint(Qt::SizeHint) const")]
        public virtual QSizeF SizeHint(Qt.SizeHint which) {
            return (QSizeF) interceptor.Invoke("sizeHint$", "sizeHint(Qt::SizeHint) const", typeof(QSizeF), typeof(Qt.SizeHint), which);
        }
        ~QGraphicsGridLayout() {
            interceptor.Invoke("~QGraphicsGridLayout", "~QGraphicsGridLayout()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QGraphicsGridLayout", "~QGraphicsGridLayout()", typeof(void));
        }
    }
}
