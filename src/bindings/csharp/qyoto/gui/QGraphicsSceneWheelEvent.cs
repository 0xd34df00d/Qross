//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsSceneWheelEvent")]
    public class QGraphicsSceneWheelEvent : QGraphicsSceneEvent, IDisposable {
        protected QGraphicsSceneWheelEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsSceneWheelEvent), this);
        }
        public QGraphicsSceneWheelEvent(QEvent.TypeOf type) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsSceneWheelEvent$", "QGraphicsSceneWheelEvent(QEvent::Type)", typeof(void), typeof(QEvent.TypeOf), type);
        }
        public QGraphicsSceneWheelEvent() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsSceneWheelEvent", "QGraphicsSceneWheelEvent()", typeof(void));
        }
        public QPointF Pos() {
            return (QPointF) interceptor.Invoke("pos", "pos() const", typeof(QPointF));
        }
        public void SetPos(QPointF pos) {
            interceptor.Invoke("setPos#", "setPos(const QPointF&)", typeof(void), typeof(QPointF), pos);
        }
        public QPointF ScenePos() {
            return (QPointF) interceptor.Invoke("scenePos", "scenePos() const", typeof(QPointF));
        }
        public void SetScenePos(QPointF pos) {
            interceptor.Invoke("setScenePos#", "setScenePos(const QPointF&)", typeof(void), typeof(QPointF), pos);
        }
        public QPoint ScreenPos() {
            return (QPoint) interceptor.Invoke("screenPos", "screenPos() const", typeof(QPoint));
        }
        public void SetScreenPos(QPoint pos) {
            interceptor.Invoke("setScreenPos#", "setScreenPos(const QPoint&)", typeof(void), typeof(QPoint), pos);
        }
        public uint Buttons() {
            return (uint) interceptor.Invoke("buttons", "buttons() const", typeof(uint));
        }
        public void SetButtons(uint buttons) {
            interceptor.Invoke("setButtons$", "setButtons(Qt::MouseButtons)", typeof(void), typeof(uint), buttons);
        }
        public uint Modifiers() {
            return (uint) interceptor.Invoke("modifiers", "modifiers() const", typeof(uint));
        }
        public void SetModifiers(uint modifiers) {
            interceptor.Invoke("setModifiers$", "setModifiers(Qt::KeyboardModifiers)", typeof(void), typeof(uint), modifiers);
        }
        public int Delta() {
            return (int) interceptor.Invoke("delta", "delta() const", typeof(int));
        }
        public void SetDelta(int delta) {
            interceptor.Invoke("setDelta$", "setDelta(int)", typeof(void), typeof(int), delta);
        }
        public Qt.Orientation Orientation() {
            return (Qt.Orientation) interceptor.Invoke("orientation", "orientation() const", typeof(Qt.Orientation));
        }
        public void SetOrientation(Qt.Orientation orientation) {
            interceptor.Invoke("setOrientation$", "setOrientation(Qt::Orientation)", typeof(void), typeof(Qt.Orientation), orientation);
        }
        ~QGraphicsSceneWheelEvent() {
            interceptor.Invoke("~QGraphicsSceneWheelEvent", "~QGraphicsSceneWheelEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsSceneWheelEvent", "~QGraphicsSceneWheelEvent()", typeof(void));
        }
    }
}
