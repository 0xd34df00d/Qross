//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTextTableCell")]
    public class QTextTableCell : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTextTableCell(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextTableCell), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTextTableCell() {
            staticInterceptor = new SmokeInvocation(typeof(QTextTableCell), null);
        }
        public QTextTableCell() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextTableCell", "QTextTableCell()", typeof(void));
        }
        public QTextTableCell(QTextTableCell o) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextTableCell#", "QTextTableCell(const QTextTableCell&)", typeof(void), typeof(QTextTableCell), o);
        }
        public void SetFormat(QTextCharFormat format) {
            interceptor.Invoke("setFormat#", "setFormat(const QTextCharFormat&)", typeof(void), typeof(QTextCharFormat), format);
        }
        public QTextCharFormat Format() {
            return (QTextCharFormat) interceptor.Invoke("format", "format() const", typeof(QTextCharFormat));
        }
        public int Row() {
            return (int) interceptor.Invoke("row", "row() const", typeof(int));
        }
        public int Column() {
            return (int) interceptor.Invoke("column", "column() const", typeof(int));
        }
        public int RowSpan() {
            return (int) interceptor.Invoke("rowSpan", "rowSpan() const", typeof(int));
        }
        public int ColumnSpan() {
            return (int) interceptor.Invoke("columnSpan", "columnSpan() const", typeof(int));
        }
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public QTextCursor FirstCursorPosition() {
            return (QTextCursor) interceptor.Invoke("firstCursorPosition", "firstCursorPosition() const", typeof(QTextCursor));
        }
        public QTextCursor LastCursorPosition() {
            return (QTextCursor) interceptor.Invoke("lastCursorPosition", "lastCursorPosition() const", typeof(QTextCursor));
        }
        public int FirstPosition() {
            return (int) interceptor.Invoke("firstPosition", "firstPosition() const", typeof(int));
        }
        public int LastPosition() {
            return (int) interceptor.Invoke("lastPosition", "lastPosition() const", typeof(int));
        }
        public override bool Equals(object o) {
            if (!(o is QTextTableCell)) { return false; }
            return this == (QTextTableCell) o;
        }
        public override int GetHashCode() {
            return interceptor.GetHashCode();
        }
        public QTextFrame.iterator Begin() {
            return (QTextFrame.iterator) interceptor.Invoke("begin", "begin() const", typeof(QTextFrame.iterator));
        }
        public QTextFrame.iterator End() {
            return (QTextFrame.iterator) interceptor.Invoke("end", "end() const", typeof(QTextFrame.iterator));
        }
        public int TableCellFormatIndex() {
            return (int) interceptor.Invoke("tableCellFormatIndex", "tableCellFormatIndex() const", typeof(int));
        }
        ~QTextTableCell() {
            interceptor.Invoke("~QTextTableCell", "~QTextTableCell()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTextTableCell", "~QTextTableCell()", typeof(void));
        }
        public static bool operator==(QTextTableCell lhs, QTextTableCell other) {
            return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QTextTableCell&) const", typeof(bool), typeof(QTextTableCell), lhs, typeof(QTextTableCell), other);
        }
        public static bool operator!=(QTextTableCell lhs, QTextTableCell other) {
            return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QTextTableCell&) const", typeof(bool), typeof(QTextTableCell), lhs, typeof(QTextTableCell), other);
        }
    }
}
