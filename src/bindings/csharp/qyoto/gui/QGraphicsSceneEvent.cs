//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsSceneEvent")]
    public class QGraphicsSceneEvent : QEvent, IDisposable {
        protected QGraphicsSceneEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsSceneEvent), this);
        }
        // QGraphicsSceneEvent* QGraphicsSceneEvent(QGraphicsSceneEventPrivate& arg1,QEvent::Type arg2); >>>> NOT CONVERTED
        // QGraphicsSceneEvent* QGraphicsSceneEvent(QGraphicsSceneEventPrivate& arg1); >>>> NOT CONVERTED
        public QGraphicsSceneEvent(QEvent.TypeOf type) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsSceneEvent$", "QGraphicsSceneEvent(QEvent::Type)", typeof(void), typeof(QEvent.TypeOf), type);
        }
        public QWidget Widget() {
            return (QWidget) interceptor.Invoke("widget", "widget() const", typeof(QWidget));
        }
        public void SetWidget(QWidget widget) {
            interceptor.Invoke("setWidget#", "setWidget(QWidget*)", typeof(void), typeof(QWidget), widget);
        }
        ~QGraphicsSceneEvent() {
            interceptor.Invoke("~QGraphicsSceneEvent", "~QGraphicsSceneEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGraphicsSceneEvent", "~QGraphicsSceneEvent()", typeof(void));
        }
    }
}
