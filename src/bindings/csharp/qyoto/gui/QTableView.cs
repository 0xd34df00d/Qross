//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QTableView")]
    public class QTableView : QAbstractItemView, IDisposable {
        protected QTableView(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTableView), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTableView() {
            staticInterceptor = new SmokeInvocation(typeof(QTableView), null);
        }
        [Q_PROPERTY("bool", "showGrid")]
        public bool ShowGrid {
            get { return (bool) interceptor.Invoke("showGrid", "showGrid()", typeof(bool)); }
            set { interceptor.Invoke("setShowGrid$", "setShowGrid(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("Qt::PenStyle", "gridStyle")]
        public Qt.PenStyle GridStyle {
            get { return (Qt.PenStyle) interceptor.Invoke("gridStyle", "gridStyle()", typeof(Qt.PenStyle)); }
            set { interceptor.Invoke("setGridStyle$", "setGridStyle(Qt::PenStyle)", typeof(void), typeof(Qt.PenStyle), value); }
        }
        [Q_PROPERTY("bool", "sortingEnabled")]
        public bool SortingEnabled {
            get { return (bool) interceptor.Invoke("isSortingEnabled", "isSortingEnabled()", typeof(bool)); }
            set { interceptor.Invoke("setSortingEnabled$", "setSortingEnabled(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "wordWrap")]
        public bool WordWrap {
            get { return (bool) interceptor.Invoke("wordWrap", "wordWrap()", typeof(bool)); }
            set { interceptor.Invoke("setWordWrap$", "setWordWrap(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "cornerButtonEnabled")]
        public bool CornerButtonEnabled {
            get { return (bool) interceptor.Invoke("isCornerButtonEnabled", "isCornerButtonEnabled()", typeof(bool)); }
            set { interceptor.Invoke("setCornerButtonEnabled$", "setCornerButtonEnabled(bool)", typeof(void), typeof(bool), value); }
        }
        // QTableView* QTableView(QTableViewPrivate& arg1,QWidget* arg2); >>>> NOT CONVERTED
        public QTableView(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTableView#", "QTableView(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QTableView() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTableView", "QTableView()", typeof(void));
        }
        [SmokeMethod("setModel(QAbstractItemModel*)")]
        public override void SetModel(QAbstractItemModel model) {
            interceptor.Invoke("setModel#", "setModel(QAbstractItemModel*)", typeof(void), typeof(QAbstractItemModel), model);
        }
        [SmokeMethod("setRootIndex(const QModelIndex&)")]
        public override void SetRootIndex(QModelIndex index) {
            interceptor.Invoke("setRootIndex#", "setRootIndex(const QModelIndex&)", typeof(void), typeof(QModelIndex), index);
        }
        [SmokeMethod("setSelectionModel(QItemSelectionModel*)")]
        public override void SetSelectionModel(QItemSelectionModel selectionModel) {
            interceptor.Invoke("setSelectionModel#", "setSelectionModel(QItemSelectionModel*)", typeof(void), typeof(QItemSelectionModel), selectionModel);
        }
        public QHeaderView HorizontalHeader() {
            return (QHeaderView) interceptor.Invoke("horizontalHeader", "horizontalHeader() const", typeof(QHeaderView));
        }
        public QHeaderView VerticalHeader() {
            return (QHeaderView) interceptor.Invoke("verticalHeader", "verticalHeader() const", typeof(QHeaderView));
        }
        public void SetHorizontalHeader(QHeaderView header) {
            interceptor.Invoke("setHorizontalHeader#", "setHorizontalHeader(QHeaderView*)", typeof(void), typeof(QHeaderView), header);
        }
        public void SetVerticalHeader(QHeaderView header) {
            interceptor.Invoke("setVerticalHeader#", "setVerticalHeader(QHeaderView*)", typeof(void), typeof(QHeaderView), header);
        }
        public int RowViewportPosition(int row) {
            return (int) interceptor.Invoke("rowViewportPosition$", "rowViewportPosition(int) const", typeof(int), typeof(int), row);
        }
        public int RowAt(int y) {
            return (int) interceptor.Invoke("rowAt$", "rowAt(int) const", typeof(int), typeof(int), y);
        }
        public void SetRowHeight(int row, int height) {
            interceptor.Invoke("setRowHeight$$", "setRowHeight(int, int)", typeof(void), typeof(int), row, typeof(int), height);
        }
        public int RowHeight(int row) {
            return (int) interceptor.Invoke("rowHeight$", "rowHeight(int) const", typeof(int), typeof(int), row);
        }
        public int ColumnViewportPosition(int column) {
            return (int) interceptor.Invoke("columnViewportPosition$", "columnViewportPosition(int) const", typeof(int), typeof(int), column);
        }
        public int ColumnAt(int x) {
            return (int) interceptor.Invoke("columnAt$", "columnAt(int) const", typeof(int), typeof(int), x);
        }
        public void SetColumnWidth(int column, int width) {
            interceptor.Invoke("setColumnWidth$$", "setColumnWidth(int, int)", typeof(void), typeof(int), column, typeof(int), width);
        }
        public int ColumnWidth(int column) {
            return (int) interceptor.Invoke("columnWidth$", "columnWidth(int) const", typeof(int), typeof(int), column);
        }
        public bool IsRowHidden(int row) {
            return (bool) interceptor.Invoke("isRowHidden$", "isRowHidden(int) const", typeof(bool), typeof(int), row);
        }
        public void SetRowHidden(int row, bool hide) {
            interceptor.Invoke("setRowHidden$$", "setRowHidden(int, bool)", typeof(void), typeof(int), row, typeof(bool), hide);
        }
        public bool IsColumnHidden(int column) {
            return (bool) interceptor.Invoke("isColumnHidden$", "isColumnHidden(int) const", typeof(bool), typeof(int), column);
        }
        public void SetColumnHidden(int column, bool hide) {
            interceptor.Invoke("setColumnHidden$$", "setColumnHidden(int, bool)", typeof(void), typeof(int), column, typeof(bool), hide);
        }
        [SmokeMethod("visualRect(const QModelIndex&) const")]
        public override QRect VisualRect(QModelIndex index) {
            return (QRect) interceptor.Invoke("visualRect#", "visualRect(const QModelIndex&) const", typeof(QRect), typeof(QModelIndex), index);
        }
        [SmokeMethod("scrollTo(const QModelIndex&, QAbstractItemView::ScrollHint)")]
        public override void ScrollTo(QModelIndex index, QAbstractItemView.ScrollHint hint) {
            interceptor.Invoke("scrollTo#$", "scrollTo(const QModelIndex&, QAbstractItemView::ScrollHint)", typeof(void), typeof(QModelIndex), index, typeof(QAbstractItemView.ScrollHint), hint);
        }
        [SmokeMethod("scrollTo(const QModelIndex&)")]
        public virtual void ScrollTo(QModelIndex index) {
            interceptor.Invoke("scrollTo#", "scrollTo(const QModelIndex&)", typeof(void), typeof(QModelIndex), index);
        }
        [SmokeMethod("indexAt(const QPoint&) const")]
        public override QModelIndex IndexAt(QPoint p) {
            return (QModelIndex) interceptor.Invoke("indexAt#", "indexAt(const QPoint&) const", typeof(QModelIndex), typeof(QPoint), p);
        }
        public void SetSpan(int row, int column, int rowSpan, int columnSpan) {
            interceptor.Invoke("setSpan$$$$", "setSpan(int, int, int, int)", typeof(void), typeof(int), row, typeof(int), column, typeof(int), rowSpan, typeof(int), columnSpan);
        }
        public int RowSpan(int row, int column) {
            return (int) interceptor.Invoke("rowSpan$$", "rowSpan(int, int) const", typeof(int), typeof(int), row, typeof(int), column);
        }
        public int ColumnSpan(int row, int column) {
            return (int) interceptor.Invoke("columnSpan$$", "columnSpan(int, int) const", typeof(int), typeof(int), row, typeof(int), column);
        }
        public void ClearSpans() {
            interceptor.Invoke("clearSpans", "clearSpans()", typeof(void));
        }
        public void SortByColumn(int column, Qt.SortOrder order) {
            interceptor.Invoke("sortByColumn$$", "sortByColumn(int, Qt::SortOrder)", typeof(void), typeof(int), column, typeof(Qt.SortOrder), order);
        }
        [Q_SLOT("void selectRow(int)")]
        public void SelectRow(int row) {
            interceptor.Invoke("selectRow$", "selectRow(int)", typeof(void), typeof(int), row);
        }
        [Q_SLOT("void selectColumn(int)")]
        public void SelectColumn(int column) {
            interceptor.Invoke("selectColumn$", "selectColumn(int)", typeof(void), typeof(int), column);
        }
        [Q_SLOT("void hideRow(int)")]
        public void HideRow(int row) {
            interceptor.Invoke("hideRow$", "hideRow(int)", typeof(void), typeof(int), row);
        }
        [Q_SLOT("void hideColumn(int)")]
        public void HideColumn(int column) {
            interceptor.Invoke("hideColumn$", "hideColumn(int)", typeof(void), typeof(int), column);
        }
        [Q_SLOT("void showRow(int)")]
        public void ShowRow(int row) {
            interceptor.Invoke("showRow$", "showRow(int)", typeof(void), typeof(int), row);
        }
        [Q_SLOT("void showColumn(int)")]
        public void ShowColumn(int column) {
            interceptor.Invoke("showColumn$", "showColumn(int)", typeof(void), typeof(int), column);
        }
        [Q_SLOT("void resizeRowToContents(int)")]
        public void ResizeRowToContents(int row) {
            interceptor.Invoke("resizeRowToContents$", "resizeRowToContents(int)", typeof(void), typeof(int), row);
        }
        [Q_SLOT("void resizeRowsToContents()")]
        public void ResizeRowsToContents() {
            interceptor.Invoke("resizeRowsToContents", "resizeRowsToContents()", typeof(void));
        }
        [Q_SLOT("void resizeColumnToContents(int)")]
        public void ResizeColumnToContents(int column) {
            interceptor.Invoke("resizeColumnToContents$", "resizeColumnToContents(int)", typeof(void), typeof(int), column);
        }
        [Q_SLOT("void resizeColumnsToContents()")]
        public void ResizeColumnsToContents() {
            interceptor.Invoke("resizeColumnsToContents", "resizeColumnsToContents()", typeof(void));
        }
        [Q_SLOT("void sortByColumn(int)")]
        public void SortByColumn(int column) {
            interceptor.Invoke("sortByColumn$", "sortByColumn(int)", typeof(void), typeof(int), column);
        }
        [Q_SLOT("void setShowGrid(bool)")]
        public void SetShowGrid(bool show) {
            interceptor.Invoke("setShowGrid$", "setShowGrid(bool)", typeof(void), typeof(bool), show);
        }
        [SmokeMethod("scrollContentsBy(int, int)")]
        protected override void ScrollContentsBy(int dx, int dy) {
            interceptor.Invoke("scrollContentsBy$$", "scrollContentsBy(int, int)", typeof(void), typeof(int), dx, typeof(int), dy);
        }
        [SmokeMethod("viewOptions() const")]
        protected override QStyleOptionViewItem ViewOptions() {
            return (QStyleOptionViewItem) interceptor.Invoke("viewOptions", "viewOptions() const", typeof(QStyleOptionViewItem));
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent e) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), e);
        }
        [SmokeMethod("timerEvent(QTimerEvent*)")]
        protected override void TimerEvent(QTimerEvent arg1) {
            interceptor.Invoke("timerEvent#", "timerEvent(QTimerEvent*)", typeof(void), typeof(QTimerEvent), arg1);
        }
        [SmokeMethod("horizontalOffset() const")]
        protected override int HorizontalOffset() {
            return (int) interceptor.Invoke("horizontalOffset", "horizontalOffset() const", typeof(int));
        }
        [SmokeMethod("verticalOffset() const")]
        protected override int VerticalOffset() {
            return (int) interceptor.Invoke("verticalOffset", "verticalOffset() const", typeof(int));
        }
        [SmokeMethod("moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers)")]
        protected override QModelIndex MoveCursor(QAbstractItemView.CursorAction cursorAction, uint modifiers) {
            return (QModelIndex) interceptor.Invoke("moveCursor$$", "moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers)", typeof(QModelIndex), typeof(QAbstractItemView.CursorAction), cursorAction, typeof(uint), modifiers);
        }
        [SmokeMethod("setSelection(const QRect&, QItemSelectionModel::SelectionFlags)")]
        protected override void SetSelection(QRect rect, uint command) {
            interceptor.Invoke("setSelection#$", "setSelection(const QRect&, QItemSelectionModel::SelectionFlags)", typeof(void), typeof(QRect), rect, typeof(uint), command);
        }
        [SmokeMethod("visualRegionForSelection(const QItemSelection&) const")]
        protected override QRegion VisualRegionForSelection(QItemSelection selection) {
            return (QRegion) interceptor.Invoke("visualRegionForSelection#", "visualRegionForSelection(const QItemSelection&) const", typeof(QRegion), typeof(QItemSelection), selection);
        }
        [SmokeMethod("selectedIndexes() const")]
        protected override List<QModelIndex> SelectedIndexes() {
            return (List<QModelIndex>) interceptor.Invoke("selectedIndexes", "selectedIndexes() const", typeof(List<QModelIndex>));
        }
        [SmokeMethod("updateGeometries()")]
        protected override void UpdateGeometries() {
            interceptor.Invoke("updateGeometries", "updateGeometries()", typeof(void));
        }
        [SmokeMethod("sizeHintForRow(int) const")]
        protected new virtual int SizeHintForRow(int row) {
            return (int) interceptor.Invoke("sizeHintForRow$", "sizeHintForRow(int) const", typeof(int), typeof(int), row);
        }
        [SmokeMethod("sizeHintForColumn(int) const")]
        protected new virtual int SizeHintForColumn(int column) {
            return (int) interceptor.Invoke("sizeHintForColumn$", "sizeHintForColumn(int) const", typeof(int), typeof(int), column);
        }
        [SmokeMethod("verticalScrollbarAction(int)")]
        protected override void VerticalScrollbarAction(int action) {
            interceptor.Invoke("verticalScrollbarAction$", "verticalScrollbarAction(int)", typeof(void), typeof(int), action);
        }
        [SmokeMethod("horizontalScrollbarAction(int)")]
        protected override void HorizontalScrollbarAction(int action) {
            interceptor.Invoke("horizontalScrollbarAction$", "horizontalScrollbarAction(int)", typeof(void), typeof(int), action);
        }
        [SmokeMethod("isIndexHidden(const QModelIndex&) const")]
        protected override bool IsIndexHidden(QModelIndex index) {
            return (bool) interceptor.Invoke("isIndexHidden#", "isIndexHidden(const QModelIndex&) const", typeof(bool), typeof(QModelIndex), index);
        }
        [SmokeMethod("selectionChanged(const QItemSelection&, const QItemSelection&)")]
        protected override void SelectionChanged(QItemSelection selected, QItemSelection deselected) {
            interceptor.Invoke("selectionChanged##", "selectionChanged(const QItemSelection&, const QItemSelection&)", typeof(void), typeof(QItemSelection), selected, typeof(QItemSelection), deselected);
        }
        [SmokeMethod("currentChanged(const QModelIndex&, const QModelIndex&)")]
        protected override void CurrentChanged(QModelIndex current, QModelIndex previous) {
            interceptor.Invoke("currentChanged##", "currentChanged(const QModelIndex&, const QModelIndex&)", typeof(void), typeof(QModelIndex), current, typeof(QModelIndex), previous);
        }
        [Q_SLOT("void rowMoved(int, int, int)")]
        protected void RowMoved(int row, int oldIndex, int newIndex) {
            interceptor.Invoke("rowMoved$$$", "rowMoved(int, int, int)", typeof(void), typeof(int), row, typeof(int), oldIndex, typeof(int), newIndex);
        }
        [Q_SLOT("void columnMoved(int, int, int)")]
        protected void ColumnMoved(int column, int oldIndex, int newIndex) {
            interceptor.Invoke("columnMoved$$$", "columnMoved(int, int, int)", typeof(void), typeof(int), column, typeof(int), oldIndex, typeof(int), newIndex);
        }
        [Q_SLOT("void rowResized(int, int, int)")]
        protected void RowResized(int row, int oldHeight, int newHeight) {
            interceptor.Invoke("rowResized$$$", "rowResized(int, int, int)", typeof(void), typeof(int), row, typeof(int), oldHeight, typeof(int), newHeight);
        }
        [Q_SLOT("void columnResized(int, int, int)")]
        protected void ColumnResized(int column, int oldWidth, int newWidth) {
            interceptor.Invoke("columnResized$$$", "columnResized(int, int, int)", typeof(void), typeof(int), column, typeof(int), oldWidth, typeof(int), newWidth);
        }
        [Q_SLOT("void rowCountChanged(int, int)")]
        protected void RowCountChanged(int oldCount, int newCount) {
            interceptor.Invoke("rowCountChanged$$", "rowCountChanged(int, int)", typeof(void), typeof(int), oldCount, typeof(int), newCount);
        }
        [Q_SLOT("void columnCountChanged(int, int)")]
        protected void ColumnCountChanged(int oldCount, int newCount) {
            interceptor.Invoke("columnCountChanged$$", "columnCountChanged(int, int)", typeof(void), typeof(int), oldCount, typeof(int), newCount);
        }
        ~QTableView() {
            interceptor.Invoke("~QTableView", "~QTableView()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTableView", "~QTableView()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQTableViewSignals Emit {
            get { return (IQTableViewSignals) Q_EMIT; }
        }
    }

    public interface IQTableViewSignals : IQAbstractItemViewSignals {
    }
}
