//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QShortcutEvent")]
    public class QShortcutEvent : QEvent, IDisposable {
        protected QShortcutEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QShortcutEvent), this);
        }
        public QShortcutEvent(QKeySequence key, int id, bool ambiguous) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QShortcutEvent#$$", "QShortcutEvent(const QKeySequence&, int, bool)", typeof(void), typeof(QKeySequence), key, typeof(int), id, typeof(bool), ambiguous);
        }
        public QShortcutEvent(QKeySequence key, int id) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QShortcutEvent#$", "QShortcutEvent(const QKeySequence&, int)", typeof(void), typeof(QKeySequence), key, typeof(int), id);
        }
        public QKeySequence Key() {
            return (QKeySequence) interceptor.Invoke("key", "key()", typeof(QKeySequence));
        }
        public int ShortcutId() {
            return (int) interceptor.Invoke("shortcutId", "shortcutId()", typeof(int));
        }
        public bool IsAmbiguous() {
            return (bool) interceptor.Invoke("isAmbiguous", "isAmbiguous()", typeof(bool));
        }
        ~QShortcutEvent() {
            interceptor.Invoke("~QShortcutEvent", "~QShortcutEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QShortcutEvent", "~QShortcutEvent()", typeof(void));
        }
    }
}
