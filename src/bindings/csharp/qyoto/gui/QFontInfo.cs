//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QFontInfo")]
    public class QFontInfo : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QFontInfo(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QFontInfo), this);
        }
        public QFontInfo(QFont arg1) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QFontInfo#", "QFontInfo(const QFont&)", typeof(void), typeof(QFont), arg1);
        }
        public QFontInfo(QFontInfo arg1) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QFontInfo#", "QFontInfo(const QFontInfo&)", typeof(void), typeof(QFontInfo), arg1);
        }
        public string Family() {
            return (string) interceptor.Invoke("family", "family() const", typeof(string));
        }
        public int PixelSize() {
            return (int) interceptor.Invoke("pixelSize", "pixelSize() const", typeof(int));
        }
        public int PointSize() {
            return (int) interceptor.Invoke("pointSize", "pointSize() const", typeof(int));
        }
        public double PointSizeF() {
            return (double) interceptor.Invoke("pointSizeF", "pointSizeF() const", typeof(double));
        }
        public bool Italic() {
            return (bool) interceptor.Invoke("italic", "italic() const", typeof(bool));
        }
        public QFont.Style Style() {
            return (QFont.Style) interceptor.Invoke("style", "style() const", typeof(QFont.Style));
        }
        public int Weight() {
            return (int) interceptor.Invoke("weight", "weight() const", typeof(int));
        }
        public bool Bold() {
            return (bool) interceptor.Invoke("bold", "bold() const", typeof(bool));
        }
        public bool Underline() {
            return (bool) interceptor.Invoke("underline", "underline() const", typeof(bool));
        }
        public bool Overline() {
            return (bool) interceptor.Invoke("overline", "overline() const", typeof(bool));
        }
        public bool StrikeOut() {
            return (bool) interceptor.Invoke("strikeOut", "strikeOut() const", typeof(bool));
        }
        public bool FixedPitch() {
            return (bool) interceptor.Invoke("fixedPitch", "fixedPitch() const", typeof(bool));
        }
        public QFont.StyleHint StyleHint() {
            return (QFont.StyleHint) interceptor.Invoke("styleHint", "styleHint() const", typeof(QFont.StyleHint));
        }
        public bool RawMode() {
            return (bool) interceptor.Invoke("rawMode", "rawMode() const", typeof(bool));
        }
        public bool ExactMatch() {
            return (bool) interceptor.Invoke("exactMatch", "exactMatch() const", typeof(bool));
        }
        ~QFontInfo() {
            interceptor.Invoke("~QFontInfo", "~QFontInfo()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QFontInfo", "~QFontInfo()", typeof(void));
        }
    }
}
