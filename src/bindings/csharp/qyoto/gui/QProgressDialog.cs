//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQProgressDialogSignals"></see> for signals emitted by QProgressDialog
    /// </remarks>
    [SmokeClass("QProgressDialog")]
    public class QProgressDialog : QDialog, IDisposable {
        protected QProgressDialog(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QProgressDialog), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QProgressDialog() {
            staticInterceptor = new SmokeInvocation(typeof(QProgressDialog), null);
        }
        [Q_PROPERTY("bool", "wasCanceled")]
        public bool WasCanceled {
            get { return (bool) interceptor.Invoke("wasCanceled", "wasCanceled()", typeof(bool)); }
        }
        [Q_PROPERTY("int", "minimum")]
        public int Minimum {
            get { return (int) interceptor.Invoke("minimum", "minimum()", typeof(int)); }
            set { interceptor.Invoke("setMinimum$", "setMinimum(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "maximum")]
        public int Maximum {
            get { return (int) interceptor.Invoke("maximum", "maximum()", typeof(int)); }
            set { interceptor.Invoke("setMaximum$", "setMaximum(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "value")]
        public int Value {
            get { return (int) interceptor.Invoke("value", "value()", typeof(int)); }
            set { interceptor.Invoke("setValue$", "setValue(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("bool", "autoReset")]
        public bool AutoReset {
            get { return (bool) interceptor.Invoke("autoReset", "autoReset()", typeof(bool)); }
            set { interceptor.Invoke("setAutoReset$", "setAutoReset(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "autoClose")]
        public bool AutoClose {
            get { return (bool) interceptor.Invoke("autoClose", "autoClose()", typeof(bool)); }
            set { interceptor.Invoke("setAutoClose$", "setAutoClose(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("int", "minimumDuration")]
        public int MinimumDuration {
            get { return (int) interceptor.Invoke("minimumDuration", "minimumDuration()", typeof(int)); }
            set { interceptor.Invoke("setMinimumDuration$", "setMinimumDuration(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("QString", "labelText")]
        public string LabelText {
            get { return (string) interceptor.Invoke("labelText", "labelText()", typeof(string)); }
            set { interceptor.Invoke("setLabelText$", "setLabelText(QString)", typeof(void), typeof(string), value); }
        }
        public QProgressDialog(QWidget parent, uint flags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProgressDialog#$", "QProgressDialog(QWidget*, Qt::WindowFlags)", typeof(void), typeof(QWidget), parent, typeof(uint), flags);
        }
        public QProgressDialog(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProgressDialog#", "QProgressDialog(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QProgressDialog() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProgressDialog", "QProgressDialog()", typeof(void));
        }
        public QProgressDialog(string labelText, string cancelButtonText, int minimum, int maximum, QWidget parent, uint flags) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProgressDialog$$$$#$", "QProgressDialog(const QString&, const QString&, int, int, QWidget*, Qt::WindowFlags)", typeof(void), typeof(string), labelText, typeof(string), cancelButtonText, typeof(int), minimum, typeof(int), maximum, typeof(QWidget), parent, typeof(uint), flags);
        }
        public QProgressDialog(string labelText, string cancelButtonText, int minimum, int maximum, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProgressDialog$$$$#", "QProgressDialog(const QString&, const QString&, int, int, QWidget*)", typeof(void), typeof(string), labelText, typeof(string), cancelButtonText, typeof(int), minimum, typeof(int), maximum, typeof(QWidget), parent);
        }
        public QProgressDialog(string labelText, string cancelButtonText, int minimum, int maximum) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QProgressDialog$$$$", "QProgressDialog(const QString&, const QString&, int, int)", typeof(void), typeof(string), labelText, typeof(string), cancelButtonText, typeof(int), minimum, typeof(int), maximum);
        }
        public void SetLabel(QLabel label) {
            interceptor.Invoke("setLabel#", "setLabel(QLabel*)", typeof(void), typeof(QLabel), label);
        }
        public void SetCancelButton(QPushButton button) {
            interceptor.Invoke("setCancelButton#", "setCancelButton(QPushButton*)", typeof(void), typeof(QPushButton), button);
        }
        public void SetBar(QProgressBar bar) {
            interceptor.Invoke("setBar#", "setBar(QProgressBar*)", typeof(void), typeof(QProgressBar), bar);
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        public new void Open() {
            interceptor.Invoke("open", "open()", typeof(void));
        }
        public void Open(QObject receiver, string member) {
            interceptor.Invoke("open#$", "open(QObject*, const char*)", typeof(void), typeof(QObject), receiver, typeof(string), member);
        }
        [Q_SLOT("void cancel()")]
        public void Cancel() {
            interceptor.Invoke("cancel", "cancel()", typeof(void));
        }
        [Q_SLOT("void reset()")]
        public void Reset() {
            interceptor.Invoke("reset", "reset()", typeof(void));
        }
        [Q_SLOT("void setMaximum(int)")]
        public void SetMaximum(int maximum) {
            interceptor.Invoke("setMaximum$", "setMaximum(int)", typeof(void), typeof(int), maximum);
        }
        [Q_SLOT("void setMinimum(int)")]
        public void SetMinimum(int minimum) {
            interceptor.Invoke("setMinimum$", "setMinimum(int)", typeof(void), typeof(int), minimum);
        }
        [Q_SLOT("void setRange(int, int)")]
        public void SetRange(int minimum, int maximum) {
            interceptor.Invoke("setRange$$", "setRange(int, int)", typeof(void), typeof(int), minimum, typeof(int), maximum);
        }
        [Q_SLOT("void setValue(int)")]
        public void SetValue(int progress) {
            interceptor.Invoke("setValue$", "setValue(int)", typeof(void), typeof(int), progress);
        }
        [Q_SLOT("void setLabelText(QString)")]
        public void SetLabelText(string text) {
            interceptor.Invoke("setLabelText$", "setLabelText(const QString&)", typeof(void), typeof(string), text);
        }
        [Q_SLOT("void setCancelButtonText(QString)")]
        public void SetCancelButtonText(string text) {
            interceptor.Invoke("setCancelButtonText$", "setCancelButtonText(const QString&)", typeof(void), typeof(string), text);
        }
        [Q_SLOT("void setMinimumDuration(int)")]
        public void SetMinimumDuration(int ms) {
            interceptor.Invoke("setMinimumDuration$", "setMinimumDuration(int)", typeof(void), typeof(int), ms);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), arg1);
        }
        [SmokeMethod("closeEvent(QCloseEvent*)")]
        protected override void CloseEvent(QCloseEvent arg1) {
            interceptor.Invoke("closeEvent#", "closeEvent(QCloseEvent*)", typeof(void), typeof(QCloseEvent), arg1);
        }
        [SmokeMethod("changeEvent(QEvent*)")]
        protected override void ChangeEvent(QEvent arg1) {
            interceptor.Invoke("changeEvent#", "changeEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("showEvent(QShowEvent*)")]
        protected override void ShowEvent(QShowEvent arg1) {
            interceptor.Invoke("showEvent#", "showEvent(QShowEvent*)", typeof(void), typeof(QShowEvent), arg1);
        }
        [Q_SLOT("void forceShow()")]
        protected void ForceShow() {
            interceptor.Invoke("forceShow", "forceShow()", typeof(void));
        }
        ~QProgressDialog() {
            interceptor.Invoke("~QProgressDialog", "~QProgressDialog()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QProgressDialog", "~QProgressDialog()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQProgressDialogSignals Emit {
            get { return (IQProgressDialogSignals) Q_EMIT; }
        }
    }

    public interface IQProgressDialogSignals : IQDialogSignals {
        [Q_SIGNAL("void canceled()")]
        void Canceled();
    }
}
