//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSlider")]
    public class QSlider : QAbstractSlider, IDisposable {
        protected QSlider(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSlider), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QSlider() {
            staticInterceptor = new SmokeInvocation(typeof(QSlider), null);
        }
        public enum TickPosition {
            NoTicks = 0,
            TicksAbove = 1,
            TicksLeft = TicksAbove,
            TicksBelow = 2,
            TicksRight = TicksBelow,
            TicksBothSides = 3,
        }
        [Q_PROPERTY("QSlider::TickPosition", "tickPosition")]
        public QSlider.TickPosition tickPosition {
            get { return (QSlider.TickPosition) interceptor.Invoke("tickPosition", "tickPosition()", typeof(QSlider.TickPosition)); }
            set { interceptor.Invoke("setTickPosition$", "setTickPosition(QSlider::TickPosition)", typeof(void), typeof(QSlider.TickPosition), value); }
        }
        [Q_PROPERTY("int", "tickInterval")]
        public int TickInterval {
            get { return (int) interceptor.Invoke("tickInterval", "tickInterval()", typeof(int)); }
            set { interceptor.Invoke("setTickInterval$", "setTickInterval(int)", typeof(void), typeof(int), value); }
        }
        public QSlider(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSlider#", "QSlider(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QSlider() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSlider", "QSlider()", typeof(void));
        }
        public QSlider(Qt.Orientation orientation, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSlider$#", "QSlider(Qt::Orientation, QWidget*)", typeof(void), typeof(Qt.Orientation), orientation, typeof(QWidget), parent);
        }
        public QSlider(Qt.Orientation orientation) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSlider$", "QSlider(Qt::Orientation)", typeof(void), typeof(Qt.Orientation), orientation);
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("minimumSizeHint() const")]
        public override QSize MinimumSizeHint() {
            return (QSize) interceptor.Invoke("minimumSizeHint", "minimumSizeHint() const", typeof(QSize));
        }
        [SmokeMethod("event(QEvent*)")]
        public new virtual bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent ev) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), ev);
        }
        [SmokeMethod("mousePressEvent(QMouseEvent*)")]
        protected override void MousePressEvent(QMouseEvent ev) {
            interceptor.Invoke("mousePressEvent#", "mousePressEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), ev);
        }
        [SmokeMethod("mouseReleaseEvent(QMouseEvent*)")]
        protected override void MouseReleaseEvent(QMouseEvent ev) {
            interceptor.Invoke("mouseReleaseEvent#", "mouseReleaseEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), ev);
        }
        [SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
        protected override void MouseMoveEvent(QMouseEvent ev) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), ev);
        }
        protected void InitStyleOption(QStyleOptionSlider option) {
            interceptor.Invoke("initStyleOption#", "initStyleOption(QStyleOptionSlider*) const", typeof(void), typeof(QStyleOptionSlider), option);
        }
        ~QSlider() {
            interceptor.Invoke("~QSlider", "~QSlider()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSlider", "~QSlider()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQSliderSignals Emit {
            get { return (IQSliderSignals) Q_EMIT; }
        }
    }

    public interface IQSliderSignals : IQAbstractSliderSignals {
    }
}
