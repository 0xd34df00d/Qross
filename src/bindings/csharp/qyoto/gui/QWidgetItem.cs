//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QWidgetItem")]
    public class QWidgetItem : QLayoutItem, IDisposable {
        protected QWidgetItem(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QWidgetItem), this);
        }
        public QWidgetItem(QWidget w) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QWidgetItem#", "QWidgetItem(QWidget*)", typeof(void), typeof(QWidget), w);
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("minimumSize() const")]
        public override QSize MinimumSize() {
            return (QSize) interceptor.Invoke("minimumSize", "minimumSize() const", typeof(QSize));
        }
        [SmokeMethod("maximumSize() const")]
        public override QSize MaximumSize() {
            return (QSize) interceptor.Invoke("maximumSize", "maximumSize() const", typeof(QSize));
        }
        [SmokeMethod("expandingDirections() const")]
        public override uint ExpandingDirections() {
            return (uint) interceptor.Invoke("expandingDirections", "expandingDirections() const", typeof(uint));
        }
        [SmokeMethod("isEmpty() const")]
        public override bool IsEmpty() {
            return (bool) interceptor.Invoke("isEmpty", "isEmpty() const", typeof(bool));
        }
        [SmokeMethod("setGeometry(const QRect&)")]
        public override void SetGeometry(QRect arg1) {
            interceptor.Invoke("setGeometry#", "setGeometry(const QRect&)", typeof(void), typeof(QRect), arg1);
        }
        [SmokeMethod("geometry() const")]
        public override QRect Geometry() {
            return (QRect) interceptor.Invoke("geometry", "geometry() const", typeof(QRect));
        }
        [SmokeMethod("widget()")]
        public override QWidget Widget() {
            return (QWidget) interceptor.Invoke("widget", "widget()", typeof(QWidget));
        }
        [SmokeMethod("hasHeightForWidth() const")]
        public override bool HasHeightForWidth() {
            return (bool) interceptor.Invoke("hasHeightForWidth", "hasHeightForWidth() const", typeof(bool));
        }
        [SmokeMethod("heightForWidth(int) const")]
        public override int HeightForWidth(int arg1) {
            return (int) interceptor.Invoke("heightForWidth$", "heightForWidth(int) const", typeof(int), typeof(int), arg1);
        }
        ~QWidgetItem() {
            interceptor.Invoke("~QWidgetItem", "~QWidgetItem()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QWidgetItem", "~QWidgetItem()", typeof(void));
        }
    }
}
