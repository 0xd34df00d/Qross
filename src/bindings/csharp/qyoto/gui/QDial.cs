//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDial")]
    public class QDial : QAbstractSlider, IDisposable {
        protected QDial(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDial), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QDial() {
            staticInterceptor = new SmokeInvocation(typeof(QDial), null);
        }
        [Q_PROPERTY("bool", "wrapping")]
        public bool Wrapping {
            get { return (bool) interceptor.Invoke("wrapping", "wrapping()", typeof(bool)); }
            set { interceptor.Invoke("setWrapping$", "setWrapping(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("int", "notchSize")]
        public int NotchSize {
            get { return (int) interceptor.Invoke("notchSize", "notchSize()", typeof(int)); }
        }
        [Q_PROPERTY("qreal", "notchTarget")]
        public double NotchTarget {
            get { return (double) interceptor.Invoke("notchTarget", "notchTarget()", typeof(double)); }
            set { interceptor.Invoke("setNotchTarget$", "setNotchTarget(qreal)", typeof(void), typeof(double), value); }
        }
        [Q_PROPERTY("bool", "notchesVisible")]
        public bool NotchesVisible {
            get { return (bool) interceptor.Invoke("notchesVisible", "notchesVisible()", typeof(bool)); }
            set { interceptor.Invoke("setNotchesVisible$", "setNotchesVisible(bool)", typeof(void), typeof(bool), value); }
        }
        public QDial(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDial#", "QDial(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QDial() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDial", "QDial()", typeof(void));
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("minimumSizeHint() const")]
        public override QSize MinimumSizeHint() {
            return (QSize) interceptor.Invoke("minimumSizeHint", "minimumSizeHint() const", typeof(QSize));
        }
        [Q_SLOT("void setNotchesVisible(bool)")]
        public void SetNotchesVisible(bool visible) {
            interceptor.Invoke("setNotchesVisible$", "setNotchesVisible(bool)", typeof(void), typeof(bool), visible);
        }
        [Q_SLOT("void setWrapping(bool)")]
        public void SetWrapping(bool on) {
            interceptor.Invoke("setWrapping$", "setWrapping(bool)", typeof(void), typeof(bool), on);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent re) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), re);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent pe) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), pe);
        }
        [SmokeMethod("mousePressEvent(QMouseEvent*)")]
        protected override void MousePressEvent(QMouseEvent me) {
            interceptor.Invoke("mousePressEvent#", "mousePressEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), me);
        }
        [SmokeMethod("mouseReleaseEvent(QMouseEvent*)")]
        protected override void MouseReleaseEvent(QMouseEvent me) {
            interceptor.Invoke("mouseReleaseEvent#", "mouseReleaseEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), me);
        }
        [SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
        protected override void MouseMoveEvent(QMouseEvent me) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), me);
        }
        [SmokeMethod("sliderChange(QAbstractSlider::SliderChange)")]
        protected override void sliderChange(QAbstractSlider.SliderChange change) {
            interceptor.Invoke("sliderChange$", "sliderChange(QAbstractSlider::SliderChange)", typeof(void), typeof(QAbstractSlider.SliderChange), change);
        }
        protected void InitStyleOption(QStyleOptionSlider option) {
            interceptor.Invoke("initStyleOption#", "initStyleOption(QStyleOptionSlider*) const", typeof(void), typeof(QStyleOptionSlider), option);
        }
        ~QDial() {
            interceptor.Invoke("~QDial", "~QDial()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDial", "~QDial()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQDialSignals Emit {
            get { return (IQDialSignals) Q_EMIT; }
        }
    }

    public interface IQDialSignals : IQAbstractSliderSignals {
    }
}
