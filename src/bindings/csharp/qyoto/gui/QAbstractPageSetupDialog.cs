//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QAbstractPageSetupDialog")]
    public abstract class QAbstractPageSetupDialog : QDialog {
        protected QAbstractPageSetupDialog(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAbstractPageSetupDialog), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QAbstractPageSetupDialog() {
            staticInterceptor = new SmokeInvocation(typeof(QAbstractPageSetupDialog), null);
        }
        // QAbstractPageSetupDialog* QAbstractPageSetupDialog(QAbstractPageSetupDialogPrivate& arg1,QPrinter* arg2,QWidget* arg3); >>>> NOT CONVERTED
        // QAbstractPageSetupDialog* QAbstractPageSetupDialog(QAbstractPageSetupDialogPrivate& arg1,QPrinter* arg2); >>>> NOT CONVERTED
        public QAbstractPageSetupDialog(QPrinter printer, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractPageSetupDialog##", "QAbstractPageSetupDialog(QPrinter*, QWidget*)", typeof(void), typeof(QPrinter), printer, typeof(QWidget), parent);
        }
        public QAbstractPageSetupDialog(QPrinter printer) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAbstractPageSetupDialog#", "QAbstractPageSetupDialog(QPrinter*)", typeof(void), typeof(QPrinter), printer);
        }
        [SmokeMethod("exec()")]
        public new abstract int Exec();
        [SmokeMethod("done(int)")]
        public override void Done(int result) {
            interceptor.Invoke("done$", "done(int)", typeof(void), typeof(int), result);
        }
        public QPrinter Printer() {
            return (QPrinter) interceptor.Invoke("printer", "printer()", typeof(QPrinter));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQAbstractPageSetupDialogSignals Emit {
            get { return (IQAbstractPageSetupDialogSignals) Q_EMIT; }
        }
    }

    public interface IQAbstractPageSetupDialogSignals : IQDialogSignals {
    }
}
