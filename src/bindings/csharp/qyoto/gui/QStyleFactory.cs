//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QStyleFactory")]
    public class QStyleFactory : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QStyleFactory(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QStyleFactory), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QStyleFactory() {
            staticInterceptor = new SmokeInvocation(typeof(QStyleFactory), null);
        }
        public QStyleFactory() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleFactory", "QStyleFactory()", typeof(void));
        }
        ~QStyleFactory() {
            interceptor.Invoke("~QStyleFactory", "~QStyleFactory()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QStyleFactory", "~QStyleFactory()", typeof(void));
        }
        public static List<string> Keys() {
            return (List<string>) staticInterceptor.Invoke("keys", "keys()", typeof(List<string>));
        }
        public static QStyle Create(string arg1) {
            return (QStyle) staticInterceptor.Invoke("create$", "create(const QString&)", typeof(QStyle), typeof(string), arg1);
        }
    }
}
