//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTextItem")]
    public class QTextItem : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTextItem(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextItem), this);
        }
        public enum RenderFlag : uint {
            RightToLeft = 0x1,
            Overline = 0x10,
            Underline = 0x20,
            StrikeOut = 0x40,
            Dummy = 0xffffffff,
        }
        public double Descent() {
            return (double) interceptor.Invoke("descent", "descent() const", typeof(double));
        }
        public double Ascent() {
            return (double) interceptor.Invoke("ascent", "ascent() const", typeof(double));
        }
        public double Width() {
            return (double) interceptor.Invoke("width", "width() const", typeof(double));
        }
        public uint RenderFlags() {
            return (uint) interceptor.Invoke("renderFlags", "renderFlags() const", typeof(uint));
        }
        public string Text() {
            return (string) interceptor.Invoke("text", "text() const", typeof(string));
        }
        public QFont Font() {
            return (QFont) interceptor.Invoke("font", "font() const", typeof(QFont));
        }
        public QTextItem() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextItem", "QTextItem()", typeof(void));
        }
        ~QTextItem() {
            interceptor.Invoke("~QTextItem", "~QTextItem()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTextItem", "~QTextItem()", typeof(void));
        }
    }
}
