//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QHelpEvent")]
    public class QHelpEvent : QEvent, IDisposable {
        protected QHelpEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QHelpEvent), this);
        }
        public QHelpEvent(QEvent.TypeOf type, QPoint pos, QPoint globalPos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHelpEvent$##", "QHelpEvent(QEvent::Type, const QPoint&, const QPoint&)", typeof(void), typeof(QEvent.TypeOf), type, typeof(QPoint), pos, typeof(QPoint), globalPos);
        }
        public int X() {
            return (int) interceptor.Invoke("x", "x() const", typeof(int));
        }
        public int Y() {
            return (int) interceptor.Invoke("y", "y() const", typeof(int));
        }
        public int GlobalX() {
            return (int) interceptor.Invoke("globalX", "globalX() const", typeof(int));
        }
        public int GlobalY() {
            return (int) interceptor.Invoke("globalY", "globalY() const", typeof(int));
        }
        public QPoint Pos() {
            return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
        }
        public QPoint GlobalPos() {
            return (QPoint) interceptor.Invoke("globalPos", "globalPos() const", typeof(QPoint));
        }
        ~QHelpEvent() {
            interceptor.Invoke("~QHelpEvent", "~QHelpEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QHelpEvent", "~QHelpEvent()", typeof(void));
        }
    }
}
