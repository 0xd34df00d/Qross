//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QStyleOptionToolBox")]
    public class QStyleOptionToolBox : QStyleOption, IDisposable {
        protected QStyleOptionToolBox(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QStyleOptionToolBox), this);
        }
        public enum StyleOptionType {
            Type = QStyleOption.OptionType.SO_ToolBox,
        }
        public enum StyleOptionVersion {
            Version = 1,
        }
        public string Text {
            get { return (string) interceptor.Invoke("text", "text()", typeof(string)); }
            set { interceptor.Invoke("setText$", "setText(QString)", typeof(void), typeof(string), value); }
        }
        public QIcon Icon {
            get { return (QIcon) interceptor.Invoke("icon", "icon()", typeof(QIcon)); }
            set { interceptor.Invoke("setIcon#", "setIcon(QIcon)", typeof(void), typeof(QIcon), value); }
        }
        public QStyleOptionToolBox() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleOptionToolBox", "QStyleOptionToolBox()", typeof(void));
        }
        public QStyleOptionToolBox(QStyleOptionToolBox other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleOptionToolBox#", "QStyleOptionToolBox(const QStyleOptionToolBox&)", typeof(void), typeof(QStyleOptionToolBox), other);
        }
        public QStyleOptionToolBox(int version) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleOptionToolBox$", "QStyleOptionToolBox(int)", typeof(void), typeof(int), version);
        }
        ~QStyleOptionToolBox() {
            interceptor.Invoke("~QStyleOptionToolBox", "~QStyleOptionToolBox()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QStyleOptionToolBox", "~QStyleOptionToolBox()", typeof(void));
        }
    }
}
