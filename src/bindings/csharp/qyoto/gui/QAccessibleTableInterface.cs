//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QAccessibleTableInterface")]
    public abstract class QAccessibleTableInterface : QAccessible2Interface {
        protected QAccessibleTableInterface(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAccessibleTableInterface), this);
        }
        public QAccessible2Interface QAccessibleTableCastHelper() {
            return (QAccessible2Interface) interceptor.Invoke("qAccessibleTableCastHelper", "qAccessibleTableCastHelper()", typeof(QAccessible2Interface));
        }
        [SmokeMethod("accessibleAt(int, int)")]
        public abstract QAccessibleInterface AccessibleAt(int row, int column);
        [SmokeMethod("caption()")]
        public abstract QAccessibleInterface Caption();
        [SmokeMethod("childIndex(int, int)")]
        public abstract int ChildIndex(int rowIndex, int columnIndex);
        [SmokeMethod("columnDescription(int)")]
        public abstract string ColumnDescription(int column);
        [SmokeMethod("columnSpan(int, int)")]
        public abstract int ColumnSpan(int row, int column);
        [SmokeMethod("columnHeader()")]
        public abstract QAccessibleInterface ColumnHeader();
        [SmokeMethod("columnIndex(int)")]
        public abstract int ColumnIndex(int childIndex);
        [SmokeMethod("columnCount()")]
        public abstract int ColumnCount();
        [SmokeMethod("rowCount()")]
        public abstract int RowCount();
        [SmokeMethod("selectedColumnCount()")]
        public abstract int SelectedColumnCount();
        [SmokeMethod("selectedRowCount()")]
        public abstract int SelectedRowCount();
        [SmokeMethod("rowDescription(int)")]
        public abstract string RowDescription(int row);
        [SmokeMethod("rowSpan(int, int)")]
        public abstract int RowSpan(int row, int column);
        [SmokeMethod("rowHeader()")]
        public abstract QAccessibleInterface RowHeader();
        [SmokeMethod("rowIndex(int)")]
        public abstract int RowIndex(int childIndex);
        [SmokeMethod("selectedRows(int, QList<int>*)")]
        public abstract int SelectedRows(int maxRows, List<int> rows);
        [SmokeMethod("selectedColumns(int, QList<int>*)")]
        public abstract int SelectedColumns(int maxColumns, List<int> columns);
        [SmokeMethod("summary()")]
        public abstract QAccessibleInterface Summary();
        [SmokeMethod("isColumnSelected(int)")]
        public abstract bool IsColumnSelected(int column);
        [SmokeMethod("isRowSelected(int)")]
        public abstract bool IsRowSelected(int row);
        [SmokeMethod("isSelected(int, int)")]
        public abstract bool IsSelected(int row, int column);
        [SmokeMethod("selectRow(int)")]
        public abstract void SelectRow(int row);
        [SmokeMethod("selectColumn(int)")]
        public abstract void SelectColumn(int column);
        [SmokeMethod("unselectRow(int)")]
        public abstract void UnselectRow(int row);
        [SmokeMethod("unselectColumn(int)")]
        public abstract void UnselectColumn(int column);
        [SmokeMethod("cellAtIndex(int, int*, int*, int*, int*, bool*)")]
        public abstract void CellAtIndex(int index, ref int row, ref int column, ref int rowSpan, ref int columnSpan, ref bool isSelected);
        public QAccessibleTableInterface() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAccessibleTableInterface", "QAccessibleTableInterface()", typeof(void));
        }
    }
}
