//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsPolygonItem")]
    public class QGraphicsPolygonItem : QAbstractGraphicsShapeItem, IDisposable {
        protected QGraphicsPolygonItem(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsPolygonItem), this);
        }
        public new const int Type = 5;
        public QGraphicsPolygonItem(IQGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPolygonItem##", "QGraphicsPolygonItem(QGraphicsItem*, QGraphicsScene*)", typeof(void), typeof(IQGraphicsItem), parent, typeof(QGraphicsScene), scene);
        }
        public QGraphicsPolygonItem(IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPolygonItem#", "QGraphicsPolygonItem(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), parent);
        }
        public QGraphicsPolygonItem() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPolygonItem", "QGraphicsPolygonItem()", typeof(void));
        }
        public QGraphicsPolygonItem(QPolygonF polygon, IQGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPolygonItem###", "QGraphicsPolygonItem(const QPolygonF&, QGraphicsItem*, QGraphicsScene*)", typeof(void), typeof(QPolygonF), polygon, typeof(IQGraphicsItem), parent, typeof(QGraphicsScene), scene);
        }
        public QGraphicsPolygonItem(QPolygonF polygon, IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPolygonItem##", "QGraphicsPolygonItem(const QPolygonF&, QGraphicsItem*)", typeof(void), typeof(QPolygonF), polygon, typeof(IQGraphicsItem), parent);
        }
        public QGraphicsPolygonItem(QPolygonF polygon) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPolygonItem#", "QGraphicsPolygonItem(const QPolygonF&)", typeof(void), typeof(QPolygonF), polygon);
        }
        public QPolygonF Polygon() {
            return (QPolygonF) interceptor.Invoke("polygon", "polygon() const", typeof(QPolygonF));
        }
        public void SetPolygon(QPolygonF polygon) {
            interceptor.Invoke("setPolygon#", "setPolygon(const QPolygonF&)", typeof(void), typeof(QPolygonF), polygon);
        }
        public Qt.FillRule FillRule() {
            return (Qt.FillRule) interceptor.Invoke("fillRule", "fillRule() const", typeof(Qt.FillRule));
        }
        public void SetFillRule(Qt.FillRule rule) {
            interceptor.Invoke("setFillRule$", "setFillRule(Qt::FillRule)", typeof(void), typeof(Qt.FillRule), rule);
        }
        [SmokeMethod("boundingRect() const")]
        public override QRectF BoundingRect() {
            return (QRectF) interceptor.Invoke("boundingRect", "boundingRect() const", typeof(QRectF));
        }
        [SmokeMethod("shape() const")]
        public override QPainterPath Shape() {
            return (QPainterPath) interceptor.Invoke("shape", "shape() const", typeof(QPainterPath));
        }
        [SmokeMethod("contains(const QPointF&) const")]
        public override bool Contains(QPointF point) {
            return (bool) interceptor.Invoke("contains#", "contains(const QPointF&) const", typeof(bool), typeof(QPointF), point);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*)")]
        public virtual void Paint(QPainter painter, QStyleOptionGraphicsItem option) {
            interceptor.Invoke("paint##", "paint(QPainter*, const QStyleOptionGraphicsItem*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option);
        }
        [SmokeMethod("isObscuredBy(const QGraphicsItem*) const")]
        public override bool IsObscuredBy(IQGraphicsItem item) {
            return (bool) interceptor.Invoke("isObscuredBy#", "isObscuredBy(const QGraphicsItem*) const", typeof(bool), typeof(IQGraphicsItem), item);
        }
        [SmokeMethod("opaqueArea() const")]
        public override QPainterPath OpaqueArea() {
            return (QPainterPath) interceptor.Invoke("opaqueArea", "opaqueArea() const", typeof(QPainterPath));
        }
        [SmokeMethod("type() const")]
        public override int type() {
            return (int) interceptor.Invoke("type", "type() const", typeof(int));
        }
        [SmokeMethod("supportsExtension(QGraphicsItem::Extension) const")]
        protected override bool SupportsExtension(QGraphicsItem.Extension extension) {
            return (bool) interceptor.Invoke("supportsExtension$", "supportsExtension(QGraphicsItem::Extension) const", typeof(bool), typeof(QGraphicsItem.Extension), extension);
        }
        [SmokeMethod("setExtension(QGraphicsItem::Extension, const QVariant&)")]
        protected override void SetExtension(QGraphicsItem.Extension extension, QVariant variant) {
            interceptor.Invoke("setExtension$#", "setExtension(QGraphicsItem::Extension, const QVariant&)", typeof(void), typeof(QGraphicsItem.Extension), extension, typeof(QVariant), variant);
        }
        [SmokeMethod("extension(const QVariant&) const")]
        protected override QVariant extension(QVariant variant) {
            return (QVariant) interceptor.Invoke("extension#", "extension(const QVariant&) const", typeof(QVariant), typeof(QVariant), variant);
        }
        ~QGraphicsPolygonItem() {
            interceptor.Invoke("~QGraphicsPolygonItem", "~QGraphicsPolygonItem()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QGraphicsPolygonItem", "~QGraphicsPolygonItem()", typeof(void));
        }
    }
}
