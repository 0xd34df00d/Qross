//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QFocusFrame")]
    public class QFocusFrame : QWidget, IDisposable {
        protected QFocusFrame(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QFocusFrame), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QFocusFrame() {
            staticInterceptor = new SmokeInvocation(typeof(QFocusFrame), null);
        }
        public QFocusFrame(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QFocusFrame#", "QFocusFrame(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QFocusFrame() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QFocusFrame", "QFocusFrame()", typeof(void));
        }
        public void SetWidget(QWidget widget) {
            interceptor.Invoke("setWidget#", "setWidget(QWidget*)", typeof(void), typeof(QWidget), widget);
        }
        public QWidget Widget() {
            return (QWidget) interceptor.Invoke("widget", "widget() const", typeof(QWidget));
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent e) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), e);
        }
        [SmokeMethod("eventFilter(QObject*, QEvent*)")]
        protected new virtual bool EventFilter(QObject arg1, QEvent arg2) {
            return (bool) interceptor.Invoke("eventFilter##", "eventFilter(QObject*, QEvent*)", typeof(bool), typeof(QObject), arg1, typeof(QEvent), arg2);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent arg1) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), arg1);
        }
        protected void InitStyleOption(QStyleOption option) {
            interceptor.Invoke("initStyleOption#", "initStyleOption(QStyleOption*) const", typeof(void), typeof(QStyleOption), option);
        }
        ~QFocusFrame() {
            interceptor.Invoke("~QFocusFrame", "~QFocusFrame()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QFocusFrame", "~QFocusFrame()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQFocusFrameSignals Emit {
            get { return (IQFocusFrameSignals) Q_EMIT; }
        }
    }

    public interface IQFocusFrameSignals : IQWidgetSignals {
    }
}
