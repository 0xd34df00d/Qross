//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSplitterHandle")]
    public class QSplitterHandle : QWidget, IDisposable {
        protected QSplitterHandle(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSplitterHandle), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QSplitterHandle() {
            staticInterceptor = new SmokeInvocation(typeof(QSplitterHandle), null);
        }
        public QSplitterHandle(Qt.Orientation o, QSplitter parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSplitterHandle$#", "QSplitterHandle(Qt::Orientation, QSplitter*)", typeof(void), typeof(Qt.Orientation), o, typeof(QSplitter), parent);
        }
        public void SetOrientation(Qt.Orientation o) {
            interceptor.Invoke("setOrientation$", "setOrientation(Qt::Orientation)", typeof(void), typeof(Qt.Orientation), o);
        }
        public new Qt.Orientation Orientation() {
            return (Qt.Orientation) interceptor.Invoke("orientation", "orientation() const", typeof(Qt.Orientation));
        }
        public bool OpaqueResize() {
            return (bool) interceptor.Invoke("opaqueResize", "opaqueResize() const", typeof(bool));
        }
        public QSplitter Splitter() {
            return (QSplitter) interceptor.Invoke("splitter", "splitter() const", typeof(QSplitter));
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent arg1) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), arg1);
        }
        [SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
        protected override void MouseMoveEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("mousePressEvent(QMouseEvent*)")]
        protected override void MousePressEvent(QMouseEvent arg1) {
            interceptor.Invoke("mousePressEvent#", "mousePressEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("mouseReleaseEvent(QMouseEvent*)")]
        protected override void MouseReleaseEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseReleaseEvent#", "mouseReleaseEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        protected void MoveSplitter(int p) {
            interceptor.Invoke("moveSplitter$", "moveSplitter(int)", typeof(void), typeof(int), p);
        }
        protected int ClosestLegalPosition(int p) {
            return (int) interceptor.Invoke("closestLegalPosition$", "closestLegalPosition(int)", typeof(int), typeof(int), p);
        }
        ~QSplitterHandle() {
            interceptor.Invoke("~QSplitterHandle", "~QSplitterHandle()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSplitterHandle", "~QSplitterHandle()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQSplitterHandleSignals Emit {
            get { return (IQSplitterHandleSignals) Q_EMIT; }
        }
    }

    public interface IQSplitterHandleSignals : IQWidgetSignals {
    }
}
