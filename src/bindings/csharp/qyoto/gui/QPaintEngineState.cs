//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QPaintEngineState")]
    public class QPaintEngineState : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QPaintEngineState(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QPaintEngineState), this);
        }
        public uint State() {
            return (uint) interceptor.Invoke("state", "state() const", typeof(uint));
        }
        public QPen Pen() {
            return (QPen) interceptor.Invoke("pen", "pen() const", typeof(QPen));
        }
        public QBrush Brush() {
            return (QBrush) interceptor.Invoke("brush", "brush() const", typeof(QBrush));
        }
        public QPointF BrushOrigin() {
            return (QPointF) interceptor.Invoke("brushOrigin", "brushOrigin() const", typeof(QPointF));
        }
        public QBrush BackgroundBrush() {
            return (QBrush) interceptor.Invoke("backgroundBrush", "backgroundBrush() const", typeof(QBrush));
        }
        public Qt.BGMode BackgroundMode() {
            return (Qt.BGMode) interceptor.Invoke("backgroundMode", "backgroundMode() const", typeof(Qt.BGMode));
        }
        public QFont Font() {
            return (QFont) interceptor.Invoke("font", "font() const", typeof(QFont));
        }
        public QMatrix Matrix() {
            return (QMatrix) interceptor.Invoke("matrix", "matrix() const", typeof(QMatrix));
        }
        public QTransform Transform() {
            return (QTransform) interceptor.Invoke("transform", "transform() const", typeof(QTransform));
        }
        public Qt.ClipOperation ClipOperation() {
            return (Qt.ClipOperation) interceptor.Invoke("clipOperation", "clipOperation() const", typeof(Qt.ClipOperation));
        }
        public QRegion ClipRegion() {
            return (QRegion) interceptor.Invoke("clipRegion", "clipRegion() const", typeof(QRegion));
        }
        public QPainterPath ClipPath() {
            return (QPainterPath) interceptor.Invoke("clipPath", "clipPath() const", typeof(QPainterPath));
        }
        public bool IsClipEnabled() {
            return (bool) interceptor.Invoke("isClipEnabled", "isClipEnabled() const", typeof(bool));
        }
        public uint RenderHints() {
            return (uint) interceptor.Invoke("renderHints", "renderHints() const", typeof(uint));
        }
        public QPainter.CompositionMode CompositionMode() {
            return (QPainter.CompositionMode) interceptor.Invoke("compositionMode", "compositionMode() const", typeof(QPainter.CompositionMode));
        }
        public double Opacity() {
            return (double) interceptor.Invoke("opacity", "opacity() const", typeof(double));
        }
        public QPainter Painter() {
            return (QPainter) interceptor.Invoke("painter", "painter() const", typeof(QPainter));
        }
        public bool BrushNeedsResolving() {
            return (bool) interceptor.Invoke("brushNeedsResolving", "brushNeedsResolving() const", typeof(bool));
        }
        public bool PenNeedsResolving() {
            return (bool) interceptor.Invoke("penNeedsResolving", "penNeedsResolving() const", typeof(bool));
        }
        public QPaintEngineState() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QPaintEngineState", "QPaintEngineState()", typeof(void));
        }
        ~QPaintEngineState() {
            interceptor.Invoke("~QPaintEngineState", "~QPaintEngineState()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QPaintEngineState", "~QPaintEngineState()", typeof(void));
        }
    }
}
