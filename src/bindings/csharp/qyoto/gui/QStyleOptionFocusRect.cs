//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QStyleOptionFocusRect")]
    public class QStyleOptionFocusRect : QStyleOption, IDisposable {
        protected QStyleOptionFocusRect(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QStyleOptionFocusRect), this);
        }
        public enum StyleOptionType {
            Type = QStyleOption.OptionType.SO_FocusRect,
        }
        public enum StyleOptionVersion {
            Version = 1,
        }
        public QColor BackgroundColor {
            get { return (QColor) interceptor.Invoke("backgroundColor", "backgroundColor()", typeof(QColor)); }
            set { interceptor.Invoke("setBackgroundColor#", "setBackgroundColor(QColor)", typeof(void), typeof(QColor), value); }
        }
        public QStyleOptionFocusRect() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleOptionFocusRect", "QStyleOptionFocusRect()", typeof(void));
        }
        public QStyleOptionFocusRect(QStyleOptionFocusRect other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleOptionFocusRect#", "QStyleOptionFocusRect(const QStyleOptionFocusRect&)", typeof(void), typeof(QStyleOptionFocusRect), other);
        }
        public QStyleOptionFocusRect(int version) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QStyleOptionFocusRect$", "QStyleOptionFocusRect(int)", typeof(void), typeof(int), version);
        }
        ~QStyleOptionFocusRect() {
            interceptor.Invoke("~QStyleOptionFocusRect", "~QStyleOptionFocusRect()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QStyleOptionFocusRect", "~QStyleOptionFocusRect()", typeof(void));
        }
    }
}
