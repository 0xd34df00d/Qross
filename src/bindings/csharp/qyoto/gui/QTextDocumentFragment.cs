//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTextDocumentFragment")]
    public class QTextDocumentFragment : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTextDocumentFragment(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextDocumentFragment), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTextDocumentFragment() {
            staticInterceptor = new SmokeInvocation(typeof(QTextDocumentFragment), null);
        }
        public QTextDocumentFragment() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentFragment", "QTextDocumentFragment()", typeof(void));
        }
        public QTextDocumentFragment(QTextDocument document) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentFragment#", "QTextDocumentFragment(const QTextDocument*)", typeof(void), typeof(QTextDocument), document);
        }
        public QTextDocumentFragment(QTextCursor range) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentFragment#", "QTextDocumentFragment(const QTextCursor&)", typeof(void), typeof(QTextCursor), range);
        }
        public QTextDocumentFragment(QTextDocumentFragment rhs) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextDocumentFragment#", "QTextDocumentFragment(const QTextDocumentFragment&)", typeof(void), typeof(QTextDocumentFragment), rhs);
        }
        public bool IsEmpty() {
            return (bool) interceptor.Invoke("isEmpty", "isEmpty() const", typeof(bool));
        }
        public string ToPlainText() {
            return (string) interceptor.Invoke("toPlainText", "toPlainText() const", typeof(string));
        }
        public string ToHtml() {
            return (string) interceptor.Invoke("toHtml", "toHtml() const", typeof(string));
        }
        public string ToHtml(QByteArray encoding) {
            return (string) interceptor.Invoke("toHtml#", "toHtml(const QByteArray&) const", typeof(string), typeof(QByteArray), encoding);
        }
        ~QTextDocumentFragment() {
            interceptor.Invoke("~QTextDocumentFragment", "~QTextDocumentFragment()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTextDocumentFragment", "~QTextDocumentFragment()", typeof(void));
        }
        public static QTextDocumentFragment FromPlainText(string plainText) {
            return (QTextDocumentFragment) staticInterceptor.Invoke("fromPlainText$", "fromPlainText(const QString&)", typeof(QTextDocumentFragment), typeof(string), plainText);
        }
        public static QTextDocumentFragment FromHtml(string html) {
            return (QTextDocumentFragment) staticInterceptor.Invoke("fromHtml$", "fromHtml(const QString&)", typeof(QTextDocumentFragment), typeof(string), html);
        }
        public static QTextDocumentFragment FromHtml(string html, QTextDocument resourceProvider) {
            return (QTextDocumentFragment) staticInterceptor.Invoke("fromHtml$#", "fromHtml(const QString&, const QTextDocument*)", typeof(QTextDocumentFragment), typeof(string), html, typeof(QTextDocument), resourceProvider);
        }
    }
}
