//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QHoverEvent")]
    public class QHoverEvent : QEvent, IDisposable {
        protected QHoverEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QHoverEvent), this);
        }
        public QHoverEvent(QEvent.TypeOf type, QPoint pos, QPoint oldPos) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHoverEvent$##", "QHoverEvent(QEvent::Type, const QPoint&, const QPoint&)", typeof(void), typeof(QEvent.TypeOf), type, typeof(QPoint), pos, typeof(QPoint), oldPos);
        }
        public QPoint Pos() {
            return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
        }
        public QPoint OldPos() {
            return (QPoint) interceptor.Invoke("oldPos", "oldPos() const", typeof(QPoint));
        }
        ~QHoverEvent() {
            interceptor.Invoke("~QHoverEvent", "~QHoverEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QHoverEvent", "~QHoverEvent()", typeof(void));
        }
    }
}
