//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QTextBlockFormat")]
    public class QTextBlockFormat : QTextFormat, IDisposable {
        protected QTextBlockFormat(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTextBlockFormat), this);
        }
        public QTextBlockFormat() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBlockFormat", "QTextBlockFormat()", typeof(void));
        }
        public new bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public void SetAlignment(uint alignment) {
            interceptor.Invoke("setAlignment$", "setAlignment(Qt::Alignment)", typeof(void), typeof(uint), alignment);
        }
        public uint Alignment() {
            return (uint) interceptor.Invoke("alignment", "alignment() const", typeof(uint));
        }
        public void SetTopMargin(double margin) {
            interceptor.Invoke("setTopMargin$", "setTopMargin(qreal)", typeof(void), typeof(double), margin);
        }
        public double TopMargin() {
            return (double) interceptor.Invoke("topMargin", "topMargin() const", typeof(double));
        }
        public void SetBottomMargin(double margin) {
            interceptor.Invoke("setBottomMargin$", "setBottomMargin(qreal)", typeof(void), typeof(double), margin);
        }
        public double BottomMargin() {
            return (double) interceptor.Invoke("bottomMargin", "bottomMargin() const", typeof(double));
        }
        public void SetLeftMargin(double margin) {
            interceptor.Invoke("setLeftMargin$", "setLeftMargin(qreal)", typeof(void), typeof(double), margin);
        }
        public double LeftMargin() {
            return (double) interceptor.Invoke("leftMargin", "leftMargin() const", typeof(double));
        }
        public void SetRightMargin(double margin) {
            interceptor.Invoke("setRightMargin$", "setRightMargin(qreal)", typeof(void), typeof(double), margin);
        }
        public double RightMargin() {
            return (double) interceptor.Invoke("rightMargin", "rightMargin() const", typeof(double));
        }
        public void SetTextIndent(double aindent) {
            interceptor.Invoke("setTextIndent$", "setTextIndent(qreal)", typeof(void), typeof(double), aindent);
        }
        public double TextIndent() {
            return (double) interceptor.Invoke("textIndent", "textIndent() const", typeof(double));
        }
        public void SetIndent(int indent) {
            interceptor.Invoke("setIndent$", "setIndent(int)", typeof(void), typeof(int), indent);
        }
        public int Indent() {
            return (int) interceptor.Invoke("indent", "indent() const", typeof(int));
        }
        public void SetNonBreakableLines(bool b) {
            interceptor.Invoke("setNonBreakableLines$", "setNonBreakableLines(bool)", typeof(void), typeof(bool), b);
        }
        public bool NonBreakableLines() {
            return (bool) interceptor.Invoke("nonBreakableLines", "nonBreakableLines() const", typeof(bool));
        }
        public void SetPageBreakPolicy(uint flags) {
            interceptor.Invoke("setPageBreakPolicy$", "setPageBreakPolicy(QTextFormat::PageBreakFlags)", typeof(void), typeof(uint), flags);
        }
        public uint PageBreakPolicy() {
            return (uint) interceptor.Invoke("pageBreakPolicy", "pageBreakPolicy() const", typeof(uint));
        }
        public void SetTabPositions(List<QTextOption.Tab> tabs) {
            interceptor.Invoke("setTabPositions?", "setTabPositions(const QList<QTextOption::Tab>&)", typeof(void), typeof(List<QTextOption.Tab>), tabs);
        }
        public List<QTextOption.Tab> TabPositions() {
            return (List<QTextOption.Tab>) interceptor.Invoke("tabPositions", "tabPositions() const", typeof(List<QTextOption.Tab>));
        }
        public QTextBlockFormat(QTextFormat fmt) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTextBlockFormat#", "QTextBlockFormat(const QTextFormat&)", typeof(void), typeof(QTextFormat), fmt);
        }
        ~QTextBlockFormat() {
            interceptor.Invoke("~QTextBlockFormat", "~QTextBlockFormat()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTextBlockFormat", "~QTextBlockFormat()", typeof(void));
        }
    }
}
