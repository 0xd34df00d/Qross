//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QCommonStyle")]
    public class QCommonStyle : QStyle, IDisposable {
        protected QCommonStyle(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QCommonStyle), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QCommonStyle() {
            staticInterceptor = new SmokeInvocation(typeof(QCommonStyle), null);
        }
        // QCommonStyle* QCommonStyle(QCommonStylePrivate& arg1); >>>> NOT CONVERTED
        public QCommonStyle() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QCommonStyle", "QCommonStyle()", typeof(void));
        }
        [SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const")]
        public override void DrawPrimitive(QStyle.PrimitiveElement pe, QStyleOption opt, QPainter p, QWidget w) {
            interceptor.Invoke("drawPrimitive$###", "drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*, const QWidget*) const", typeof(void), typeof(QStyle.PrimitiveElement), pe, typeof(QStyleOption), opt, typeof(QPainter), p, typeof(QWidget), w);
        }
        [SmokeMethod("drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const")]
        public virtual void DrawPrimitive(QStyle.PrimitiveElement pe, QStyleOption opt, QPainter p) {
            interceptor.Invoke("drawPrimitive$##", "drawPrimitive(QStyle::PrimitiveElement, const QStyleOption*, QPainter*) const", typeof(void), typeof(QStyle.PrimitiveElement), pe, typeof(QStyleOption), opt, typeof(QPainter), p);
        }
        [SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const")]
        public override void DrawControl(QStyle.ControlElement element, QStyleOption opt, QPainter p, QWidget w) {
            interceptor.Invoke("drawControl$###", "drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*, const QWidget*) const", typeof(void), typeof(QStyle.ControlElement), element, typeof(QStyleOption), opt, typeof(QPainter), p, typeof(QWidget), w);
        }
        [SmokeMethod("drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*) const")]
        public virtual void DrawControl(QStyle.ControlElement element, QStyleOption opt, QPainter p) {
            interceptor.Invoke("drawControl$##", "drawControl(QStyle::ControlElement, const QStyleOption*, QPainter*) const", typeof(void), typeof(QStyle.ControlElement), element, typeof(QStyleOption), opt, typeof(QPainter), p);
        }
        [SmokeMethod("subElementRect(QStyle::SubElement, const QStyleOption*, const QWidget*) const")]
        public override QRect SubElementRect(QStyle.SubElement r, QStyleOption opt, QWidget widget) {
            return (QRect) interceptor.Invoke("subElementRect$##", "subElementRect(QStyle::SubElement, const QStyleOption*, const QWidget*) const", typeof(QRect), typeof(QStyle.SubElement), r, typeof(QStyleOption), opt, typeof(QWidget), widget);
        }
        [SmokeMethod("subElementRect(QStyle::SubElement, const QStyleOption*) const")]
        public virtual QRect SubElementRect(QStyle.SubElement r, QStyleOption opt) {
            return (QRect) interceptor.Invoke("subElementRect$#", "subElementRect(QStyle::SubElement, const QStyleOption*) const", typeof(QRect), typeof(QStyle.SubElement), r, typeof(QStyleOption), opt);
        }
        [SmokeMethod("drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const")]
        public override void DrawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPainter p, QWidget w) {
            interceptor.Invoke("drawComplexControl$###", "drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*, const QWidget*) const", typeof(void), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QPainter), p, typeof(QWidget), w);
        }
        [SmokeMethod("drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*) const")]
        public virtual void DrawComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPainter p) {
            interceptor.Invoke("drawComplexControl$##", "drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, QPainter*) const", typeof(void), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QPainter), p);
        }
        [SmokeMethod("hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&, const QWidget*) const")]
        public override QStyle.SubControl HitTestComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPoint pt, QWidget w) {
            return (QStyle.SubControl) interceptor.Invoke("hitTestComplexControl$###", "hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&, const QWidget*) const", typeof(QStyle.SubControl), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QPoint), pt, typeof(QWidget), w);
        }
        [SmokeMethod("hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&) const")]
        public virtual QStyle.SubControl HitTestComplexControl(QStyle.ComplexControl cc, QStyleOptionComplex opt, QPoint pt) {
            return (QStyle.SubControl) interceptor.Invoke("hitTestComplexControl$##", "hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex*, const QPoint&) const", typeof(QStyle.SubControl), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QPoint), pt);
        }
        [SmokeMethod("subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const")]
        public override QRect SubControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc, QWidget w) {
            return (QRect) interceptor.Invoke("subControlRect$#$#", "subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl, const QWidget*) const", typeof(QRect), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QStyle.SubControl), sc, typeof(QWidget), w);
        }
        [SmokeMethod("subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl) const")]
        public virtual QRect SubControlRect(QStyle.ComplexControl cc, QStyleOptionComplex opt, QStyle.SubControl sc) {
            return (QRect) interceptor.Invoke("subControlRect$#$", "subControlRect(QStyle::ComplexControl, const QStyleOptionComplex*, QStyle::SubControl) const", typeof(QRect), typeof(QStyle.ComplexControl), cc, typeof(QStyleOptionComplex), opt, typeof(QStyle.SubControl), sc);
        }
        [SmokeMethod("sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const")]
        public override QSize SizeFromContents(QStyle.ContentsType ct, QStyleOption opt, QSize contentsSize, QWidget widget) {
            return (QSize) interceptor.Invoke("sizeFromContents$###", "sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&, const QWidget*) const", typeof(QSize), typeof(QStyle.ContentsType), ct, typeof(QStyleOption), opt, typeof(QSize), contentsSize, typeof(QWidget), widget);
        }
        [SmokeMethod("sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&) const")]
        public virtual QSize SizeFromContents(QStyle.ContentsType ct, QStyleOption opt, QSize contentsSize) {
            return (QSize) interceptor.Invoke("sizeFromContents$##", "sizeFromContents(QStyle::ContentsType, const QStyleOption*, const QSize&) const", typeof(QSize), typeof(QStyle.ContentsType), ct, typeof(QStyleOption), opt, typeof(QSize), contentsSize);
        }
        [SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const")]
        public override int pixelMetric(QStyle.PixelMetric m, QStyleOption opt, QWidget widget) {
            return (int) interceptor.Invoke("pixelMetric$##", "pixelMetric(QStyle::PixelMetric, const QStyleOption*, const QWidget*) const", typeof(int), typeof(QStyle.PixelMetric), m, typeof(QStyleOption), opt, typeof(QWidget), widget);
        }
        [SmokeMethod("pixelMetric(QStyle::PixelMetric, const QStyleOption*) const")]
        public virtual int pixelMetric(QStyle.PixelMetric m, QStyleOption opt) {
            return (int) interceptor.Invoke("pixelMetric$#", "pixelMetric(QStyle::PixelMetric, const QStyleOption*) const", typeof(int), typeof(QStyle.PixelMetric), m, typeof(QStyleOption), opt);
        }
        [SmokeMethod("pixelMetric(QStyle::PixelMetric) const")]
        public virtual int pixelMetric(QStyle.PixelMetric m) {
            return (int) interceptor.Invoke("pixelMetric$", "pixelMetric(QStyle::PixelMetric) const", typeof(int), typeof(QStyle.PixelMetric), m);
        }
        [SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const")]
        public override int styleHint(QStyle.StyleHint sh, QStyleOption opt, QWidget w, QStyleHintReturn shret) {
            return (int) interceptor.Invoke("styleHint$###", "styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*, QStyleHintReturn*) const", typeof(int), typeof(QStyle.StyleHint), sh, typeof(QStyleOption), opt, typeof(QWidget), w, typeof(QStyleHintReturn), shret);
        }
        [SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*) const")]
        public virtual int styleHint(QStyle.StyleHint sh, QStyleOption opt, QWidget w) {
            return (int) interceptor.Invoke("styleHint$##", "styleHint(QStyle::StyleHint, const QStyleOption*, const QWidget*) const", typeof(int), typeof(QStyle.StyleHint), sh, typeof(QStyleOption), opt, typeof(QWidget), w);
        }
        [SmokeMethod("styleHint(QStyle::StyleHint, const QStyleOption*) const")]
        public virtual int styleHint(QStyle.StyleHint sh, QStyleOption opt) {
            return (int) interceptor.Invoke("styleHint$#", "styleHint(QStyle::StyleHint, const QStyleOption*) const", typeof(int), typeof(QStyle.StyleHint), sh, typeof(QStyleOption), opt);
        }
        [SmokeMethod("styleHint(QStyle::StyleHint) const")]
        public virtual int styleHint(QStyle.StyleHint sh) {
            return (int) interceptor.Invoke("styleHint$", "styleHint(QStyle::StyleHint) const", typeof(int), typeof(QStyle.StyleHint), sh);
        }
        [SmokeMethod("standardPixmap(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const")]
        public override QPixmap standardPixmap(QStyle.StandardPixmap sp, QStyleOption opt, QWidget widget) {
            return (QPixmap) interceptor.Invoke("standardPixmap$##", "standardPixmap(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const", typeof(QPixmap), typeof(QStyle.StandardPixmap), sp, typeof(QStyleOption), opt, typeof(QWidget), widget);
        }
        [SmokeMethod("standardPixmap(QStyle::StandardPixmap, const QStyleOption*) const")]
        public virtual QPixmap standardPixmap(QStyle.StandardPixmap sp, QStyleOption opt) {
            return (QPixmap) interceptor.Invoke("standardPixmap$#", "standardPixmap(QStyle::StandardPixmap, const QStyleOption*) const", typeof(QPixmap), typeof(QStyle.StandardPixmap), sp, typeof(QStyleOption), opt);
        }
        [SmokeMethod("standardPixmap(QStyle::StandardPixmap) const")]
        public virtual QPixmap standardPixmap(QStyle.StandardPixmap sp) {
            return (QPixmap) interceptor.Invoke("standardPixmap$", "standardPixmap(QStyle::StandardPixmap) const", typeof(QPixmap), typeof(QStyle.StandardPixmap), sp);
        }
        [SmokeMethod("generatedIconPixmap(QIcon::Mode, const QPixmap&, const QStyleOption*) const")]
        public override QPixmap GeneratedIconPixmap(QIcon.Mode iconMode, QPixmap pixmap, QStyleOption opt) {
            return (QPixmap) interceptor.Invoke("generatedIconPixmap$##", "generatedIconPixmap(QIcon::Mode, const QPixmap&, const QStyleOption*) const", typeof(QPixmap), typeof(QIcon.Mode), iconMode, typeof(QPixmap), pixmap, typeof(QStyleOption), opt);
        }
        [SmokeMethod("polish(QPalette&)")]
        public override void Polish(QPalette arg1) {
            interceptor.Invoke("polish#", "polish(QPalette&)", typeof(void), typeof(QPalette), arg1);
        }
        [SmokeMethod("polish(QApplication*)")]
        public override void Polish(QApplication app) {
            interceptor.Invoke("polish#", "polish(QApplication*)", typeof(void), typeof(QApplication), app);
        }
        [SmokeMethod("polish(QWidget*)")]
        public override void Polish(QWidget widget) {
            interceptor.Invoke("polish#", "polish(QWidget*)", typeof(void), typeof(QWidget), widget);
        }
        [SmokeMethod("unpolish(QWidget*)")]
        public override void Unpolish(QWidget widget) {
            interceptor.Invoke("unpolish#", "unpolish(QWidget*)", typeof(void), typeof(QWidget), widget);
        }
        [SmokeMethod("unpolish(QApplication*)")]
        public override void Unpolish(QApplication application) {
            interceptor.Invoke("unpolish#", "unpolish(QApplication*)", typeof(void), typeof(QApplication), application);
        }
        [Q_SLOT("QIcon standardIconImplementation(StandardPixmap, QStyleOption*, QWidget*)")]
        protected new QIcon StandardIconImplementation(QStyle.StandardPixmap standardIcon, QStyleOption opt, QWidget widget) {
            return (QIcon) interceptor.Invoke("standardIconImplementation$##", "standardIconImplementation(QStyle::StandardPixmap, const QStyleOption*, const QWidget*) const", typeof(QIcon), typeof(QStyle.StandardPixmap), standardIcon, typeof(QStyleOption), opt, typeof(QWidget), widget);
        }
        [Q_SLOT("QIcon standardIconImplementation(StandardPixmap, QStyleOption*)")]
        protected new QIcon StandardIconImplementation(QStyle.StandardPixmap standardIcon, QStyleOption opt) {
            return (QIcon) interceptor.Invoke("standardIconImplementation$#", "standardIconImplementation(QStyle::StandardPixmap, const QStyleOption*) const", typeof(QIcon), typeof(QStyle.StandardPixmap), standardIcon, typeof(QStyleOption), opt);
        }
        [Q_SLOT("QIcon standardIconImplementation(StandardPixmap)")]
        protected new QIcon StandardIconImplementation(QStyle.StandardPixmap standardIcon) {
            return (QIcon) interceptor.Invoke("standardIconImplementation$", "standardIconImplementation(QStyle::StandardPixmap) const", typeof(QIcon), typeof(QStyle.StandardPixmap), standardIcon);
        }
        ~QCommonStyle() {
            interceptor.Invoke("~QCommonStyle", "~QCommonStyle()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QCommonStyle", "~QCommonStyle()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQCommonStyleSignals Emit {
            get { return (IQCommonStyleSignals) Q_EMIT; }
        }
    }

    public interface IQCommonStyleSignals : IQStyleSignals {
    }
}
