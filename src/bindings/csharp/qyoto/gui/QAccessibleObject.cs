//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QAccessibleObject")]
    public abstract class QAccessibleObject : QAccessibleInterface {
        protected QAccessibleObject(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAccessibleObject), this);
        }
        public QAccessibleObject(QObject arg1) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAccessibleObject#", "QAccessibleObject(QObject*)", typeof(void), typeof(QObject), arg1);
        }
        [SmokeMethod("isValid() const")]
        public override bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        [SmokeMethod("object() const")]
        public override QObject Object() {
            return (QObject) interceptor.Invoke("object", "object() const", typeof(QObject));
        }
        [SmokeMethod("rect(int) const")]
        public override QRect Rect(int child) {
            return (QRect) interceptor.Invoke("rect$", "rect(int) const", typeof(QRect), typeof(int), child);
        }
        [SmokeMethod("setText(QAccessible::Text, int, const QString&)")]
        public override void SetText(QAccessible.Text t, int child, string text) {
            interceptor.Invoke("setText$$$", "setText(QAccessible::Text, int, const QString&)", typeof(void), typeof(QAccessible.Text), t, typeof(int), child, typeof(string), text);
        }
        [SmokeMethod("userActionCount(int) const")]
        public override int UserActionCount(int child) {
            return (int) interceptor.Invoke("userActionCount$", "userActionCount(int) const", typeof(int), typeof(int), child);
        }
        [SmokeMethod("doAction(int, int, const QList<QVariant>&)")]
        public override bool DoAction(int action, int child, List<QVariant> arg3) {
            return (bool) interceptor.Invoke("doAction$$?", "doAction(int, int, const QList<QVariant>&)", typeof(bool), typeof(int), action, typeof(int), child, typeof(List<QVariant>), arg3);
        }
        [SmokeMethod("actionText(int, QAccessible::Text, int) const")]
        public override string ActionText(int action, QAccessible.Text t, int child) {
            return (string) interceptor.Invoke("actionText$$$", "actionText(int, QAccessible::Text, int) const", typeof(string), typeof(int), action, typeof(QAccessible.Text), t, typeof(int), child);
        }
    }
}
