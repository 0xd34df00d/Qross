//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    /// <remarks> See <see cref="IQGroupBoxSignals"></see> for signals emitted by QGroupBox
    /// </remarks>
    [SmokeClass("QGroupBox")]
    public class QGroupBox : QWidget, IDisposable {
        protected QGroupBox(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGroupBox), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QGroupBox() {
            staticInterceptor = new SmokeInvocation(typeof(QGroupBox), null);
        }
        [Q_PROPERTY("QString", "title")]
        public string Title {
            get { return (string) interceptor.Invoke("title", "title()", typeof(string)); }
            set { interceptor.Invoke("setTitle$", "setTitle(QString)", typeof(void), typeof(string), value); }
        }
        [Q_PROPERTY("Qt::Alignment", "alignment")]
        public uint Alignment {
            get { return (uint) interceptor.Invoke("alignment", "alignment()", typeof(uint)); }
            set { interceptor.Invoke("setAlignment$", "setAlignment(Qt::Alignment)", typeof(void), typeof(uint), value); }
        }
        [Q_PROPERTY("bool", "flat")]
        public bool Flat {
            get { return (bool) interceptor.Invoke("isFlat", "isFlat()", typeof(bool)); }
            set { interceptor.Invoke("setFlat$", "setFlat(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "checkable")]
        public bool Checkable {
            get { return (bool) interceptor.Invoke("isCheckable", "isCheckable()", typeof(bool)); }
            set { interceptor.Invoke("setCheckable$", "setCheckable(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "checked")]
        public bool Checked {
            get { return (bool) interceptor.Invoke("isChecked", "isChecked()", typeof(bool)); }
            set { interceptor.Invoke("setChecked$", "setChecked(bool)", typeof(void), typeof(bool), value); }
        }
        public QGroupBox(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGroupBox#", "QGroupBox(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QGroupBox() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGroupBox", "QGroupBox()", typeof(void));
        }
        public QGroupBox(string title, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGroupBox$#", "QGroupBox(const QString&, QWidget*)", typeof(void), typeof(string), title, typeof(QWidget), parent);
        }
        public QGroupBox(string title) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGroupBox$", "QGroupBox(const QString&)", typeof(void), typeof(string), title);
        }
        [SmokeMethod("minimumSizeHint() const")]
        public override QSize MinimumSizeHint() {
            return (QSize) interceptor.Invoke("minimumSizeHint", "minimumSizeHint() const", typeof(QSize));
        }
        [Q_SLOT("void setChecked(bool)")]
        public void SetChecked(bool arg1) {
            interceptor.Invoke("setChecked$", "setChecked(bool)", typeof(void), typeof(bool), arg1);
        }
        [SmokeMethod("event(QEvent*)")]
        protected override bool Event(QEvent arg1) {
            return (bool) interceptor.Invoke("event#", "event(QEvent*)", typeof(bool), typeof(QEvent), arg1);
        }
        [SmokeMethod("childEvent(QChildEvent*)")]
        protected override void ChildEvent(QChildEvent arg1) {
            interceptor.Invoke("childEvent#", "childEvent(QChildEvent*)", typeof(void), typeof(QChildEvent), arg1);
        }
        [SmokeMethod("resizeEvent(QResizeEvent*)")]
        protected override void ResizeEvent(QResizeEvent arg1) {
            interceptor.Invoke("resizeEvent#", "resizeEvent(QResizeEvent*)", typeof(void), typeof(QResizeEvent), arg1);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent arg1) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), arg1);
        }
        [SmokeMethod("focusInEvent(QFocusEvent*)")]
        protected override void FocusInEvent(QFocusEvent arg1) {
            interceptor.Invoke("focusInEvent#", "focusInEvent(QFocusEvent*)", typeof(void), typeof(QFocusEvent), arg1);
        }
        [SmokeMethod("changeEvent(QEvent*)")]
        protected override void ChangeEvent(QEvent arg1) {
            interceptor.Invoke("changeEvent#", "changeEvent(QEvent*)", typeof(void), typeof(QEvent), arg1);
        }
        [SmokeMethod("mousePressEvent(QMouseEvent*)")]
        protected override void MousePressEvent(QMouseEvent arg1) {
            interceptor.Invoke("mousePressEvent#", "mousePressEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("mouseMoveEvent(QMouseEvent*)")]
        protected override void MouseMoveEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseMoveEvent#", "mouseMoveEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        [SmokeMethod("mouseReleaseEvent(QMouseEvent*)")]
        protected override void MouseReleaseEvent(QMouseEvent arg1) {
            interceptor.Invoke("mouseReleaseEvent#", "mouseReleaseEvent(QMouseEvent*)", typeof(void), typeof(QMouseEvent), arg1);
        }
        protected void InitStyleOption(QStyleOptionGroupBox option) {
            interceptor.Invoke("initStyleOption#", "initStyleOption(QStyleOptionGroupBox*) const", typeof(void), typeof(QStyleOptionGroupBox), option);
        }
        ~QGroupBox() {
            interceptor.Invoke("~QGroupBox", "~QGroupBox()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QGroupBox", "~QGroupBox()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQGroupBoxSignals Emit {
            get { return (IQGroupBoxSignals) Q_EMIT; }
        }
    }

    public interface IQGroupBoxSignals : IQWidgetSignals {
        [Q_SIGNAL("void clicked(bool)")]
        void Clicked(bool arg1);
        [Q_SIGNAL("void clicked()")]
        void Clicked();
        [Q_SIGNAL("void toggled(bool)")]
        void Toggled(bool arg1);
    }
}
