//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QGraphicsPixmapItem")]
    public class QGraphicsPixmapItem : QGraphicsItem, IDisposable {
        protected QGraphicsPixmapItem(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QGraphicsPixmapItem), this);
        }
        public enum ShapeMode {
            MaskShape = 0,
            BoundingRectShape = 1,
            HeuristicMaskShape = 2,
        }
        public new const int Type = 7;
        public QGraphicsPixmapItem(IQGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPixmapItem##", "QGraphicsPixmapItem(QGraphicsItem*, QGraphicsScene*)", typeof(void), typeof(IQGraphicsItem), parent, typeof(QGraphicsScene), scene);
        }
        public QGraphicsPixmapItem(IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPixmapItem#", "QGraphicsPixmapItem(QGraphicsItem*)", typeof(void), typeof(IQGraphicsItem), parent);
        }
        public QGraphicsPixmapItem() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPixmapItem", "QGraphicsPixmapItem()", typeof(void));
        }
        public QGraphicsPixmapItem(QPixmap pixmap, IQGraphicsItem parent, QGraphicsScene scene) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPixmapItem###", "QGraphicsPixmapItem(const QPixmap&, QGraphicsItem*, QGraphicsScene*)", typeof(void), typeof(QPixmap), pixmap, typeof(IQGraphicsItem), parent, typeof(QGraphicsScene), scene);
        }
        public QGraphicsPixmapItem(QPixmap pixmap, IQGraphicsItem parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPixmapItem##", "QGraphicsPixmapItem(const QPixmap&, QGraphicsItem*)", typeof(void), typeof(QPixmap), pixmap, typeof(IQGraphicsItem), parent);
        }
        public QGraphicsPixmapItem(QPixmap pixmap) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QGraphicsPixmapItem#", "QGraphicsPixmapItem(const QPixmap&)", typeof(void), typeof(QPixmap), pixmap);
        }
        public QPixmap Pixmap() {
            return (QPixmap) interceptor.Invoke("pixmap", "pixmap() const", typeof(QPixmap));
        }
        public void SetPixmap(QPixmap pixmap) {
            interceptor.Invoke("setPixmap#", "setPixmap(const QPixmap&)", typeof(void), typeof(QPixmap), pixmap);
        }
        public Qt.TransformationMode TransformationMode() {
            return (Qt.TransformationMode) interceptor.Invoke("transformationMode", "transformationMode() const", typeof(Qt.TransformationMode));
        }
        public void SetTransformationMode(Qt.TransformationMode mode) {
            interceptor.Invoke("setTransformationMode$", "setTransformationMode(Qt::TransformationMode)", typeof(void), typeof(Qt.TransformationMode), mode);
        }
        public QPointF Offset() {
            return (QPointF) interceptor.Invoke("offset", "offset() const", typeof(QPointF));
        }
        public void SetOffset(QPointF offset) {
            interceptor.Invoke("setOffset#", "setOffset(const QPointF&)", typeof(void), typeof(QPointF), offset);
        }
        public void SetOffset(double x, double y) {
            interceptor.Invoke("setOffset$$", "setOffset(qreal, qreal)", typeof(void), typeof(double), x, typeof(double), y);
        }
        [SmokeMethod("boundingRect() const")]
        public override QRectF BoundingRect() {
            return (QRectF) interceptor.Invoke("boundingRect", "boundingRect() const", typeof(QRectF));
        }
        [SmokeMethod("shape() const")]
        public override QPainterPath Shape() {
            return (QPainterPath) interceptor.Invoke("shape", "shape() const", typeof(QPainterPath));
        }
        [SmokeMethod("contains(const QPointF&) const")]
        public override bool Contains(QPointF point) {
            return (bool) interceptor.Invoke("contains#", "contains(const QPointF&) const", typeof(bool), typeof(QPointF), point);
        }
        [SmokeMethod("paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)")]
        public override void Paint(QPainter painter, QStyleOptionGraphicsItem option, QWidget widget) {
            interceptor.Invoke("paint###", "paint(QPainter*, const QStyleOptionGraphicsItem*, QWidget*)", typeof(void), typeof(QPainter), painter, typeof(QStyleOptionGraphicsItem), option, typeof(QWidget), widget);
        }
        [SmokeMethod("isObscuredBy(const QGraphicsItem*) const")]
        public override bool IsObscuredBy(IQGraphicsItem item) {
            return (bool) interceptor.Invoke("isObscuredBy#", "isObscuredBy(const QGraphicsItem*) const", typeof(bool), typeof(IQGraphicsItem), item);
        }
        [SmokeMethod("opaqueArea() const")]
        public override QPainterPath OpaqueArea() {
            return (QPainterPath) interceptor.Invoke("opaqueArea", "opaqueArea() const", typeof(QPainterPath));
        }
        [SmokeMethod("type() const")]
        public override int type() {
            return (int) interceptor.Invoke("type", "type() const", typeof(int));
        }
        public QGraphicsPixmapItem.ShapeMode shapeMode() {
            return (QGraphicsPixmapItem.ShapeMode) interceptor.Invoke("shapeMode", "shapeMode() const", typeof(QGraphicsPixmapItem.ShapeMode));
        }
        public void SetShapeMode(QGraphicsPixmapItem.ShapeMode mode) {
            interceptor.Invoke("setShapeMode$", "setShapeMode(QGraphicsPixmapItem::ShapeMode)", typeof(void), typeof(QGraphicsPixmapItem.ShapeMode), mode);
        }
        [SmokeMethod("supportsExtension(QGraphicsItem::Extension) const")]
        protected override bool SupportsExtension(QGraphicsItem.Extension extension) {
            return (bool) interceptor.Invoke("supportsExtension$", "supportsExtension(QGraphicsItem::Extension) const", typeof(bool), typeof(QGraphicsItem.Extension), extension);
        }
        [SmokeMethod("setExtension(QGraphicsItem::Extension, const QVariant&)")]
        protected override void SetExtension(QGraphicsItem.Extension extension, QVariant variant) {
            interceptor.Invoke("setExtension$#", "setExtension(QGraphicsItem::Extension, const QVariant&)", typeof(void), typeof(QGraphicsItem.Extension), extension, typeof(QVariant), variant);
        }
        [SmokeMethod("extension(const QVariant&) const")]
        protected override QVariant extension(QVariant variant) {
            return (QVariant) interceptor.Invoke("extension#", "extension(const QVariant&) const", typeof(QVariant), typeof(QVariant), variant);
        }
        ~QGraphicsPixmapItem() {
            interceptor.Invoke("~QGraphicsPixmapItem", "~QGraphicsPixmapItem()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QGraphicsPixmapItem", "~QGraphicsPixmapItem()", typeof(void));
        }
    }
}
