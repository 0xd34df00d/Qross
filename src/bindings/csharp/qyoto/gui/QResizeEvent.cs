//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QResizeEvent")]
    public class QResizeEvent : QEvent, IDisposable {
        protected QResizeEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QResizeEvent), this);
        }
        public QResizeEvent(QSize size, QSize oldSize) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QResizeEvent##", "QResizeEvent(const QSize&, const QSize&)", typeof(void), typeof(QSize), size, typeof(QSize), oldSize);
        }
        public QSize Size() {
            return (QSize) interceptor.Invoke("size", "size() const", typeof(QSize));
        }
        public QSize OldSize() {
            return (QSize) interceptor.Invoke("oldSize", "oldSize() const", typeof(QSize));
        }
        ~QResizeEvent() {
            interceptor.Invoke("~QResizeEvent", "~QResizeEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QResizeEvent", "~QResizeEvent()", typeof(void));
        }
    }
}
