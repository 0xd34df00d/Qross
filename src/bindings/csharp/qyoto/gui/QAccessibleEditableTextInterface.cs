//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QAccessibleEditableTextInterface")]
    public abstract class QAccessibleEditableTextInterface : QAccessible2Interface {
        protected QAccessibleEditableTextInterface(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QAccessibleEditableTextInterface), this);
        }
        public QAccessible2Interface QAccessibleEditableTextCastHelper() {
            return (QAccessible2Interface) interceptor.Invoke("qAccessibleEditableTextCastHelper", "qAccessibleEditableTextCastHelper()", typeof(QAccessible2Interface));
        }
        [SmokeMethod("copyText(int, int)")]
        public abstract void CopyText(int startOffset, int endOffset);
        [SmokeMethod("deleteText(int, int)")]
        public abstract void DeleteText(int startOffset, int endOffset);
        [SmokeMethod("insertText(int, const QString&)")]
        public abstract void InsertText(int offset, string text);
        [SmokeMethod("cutText(int, int)")]
        public abstract void CutText(int startOffset, int endOffset);
        [SmokeMethod("pasteText(int)")]
        public abstract void PasteText(int offset);
        [SmokeMethod("replaceText(int, int, const QString&)")]
        public abstract void ReplaceText(int startOffset, int endOffset, string text);
        [SmokeMethod("setAttributes(int, int, const QString&)")]
        public abstract void SetAttributes(int startOffset, int endOffset, string attributes);
        public QAccessibleEditableTextInterface() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QAccessibleEditableTextInterface", "QAccessibleEditableTextInterface()", typeof(void));
        }
    }
}
