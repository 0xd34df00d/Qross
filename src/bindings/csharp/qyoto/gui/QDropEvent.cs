//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDropEvent")]
    public class QDropEvent : QEvent, IQMimeSource, IDisposable {
        protected QDropEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDropEvent), this);
        }
        public QDropEvent(QPoint pos, uint actions, QMimeData data, uint buttons, uint modifiers, QEvent.TypeOf type) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDropEvent#$#$$$", "QDropEvent(const QPoint&, Qt::DropActions, const QMimeData*, Qt::MouseButtons, Qt::KeyboardModifiers, QEvent::Type)", typeof(void), typeof(QPoint), pos, typeof(uint), actions, typeof(QMimeData), data, typeof(uint), buttons, typeof(uint), modifiers, typeof(QEvent.TypeOf), type);
        }
        public QDropEvent(QPoint pos, uint actions, QMimeData data, uint buttons, uint modifiers) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDropEvent#$#$$", "QDropEvent(const QPoint&, Qt::DropActions, const QMimeData*, Qt::MouseButtons, Qt::KeyboardModifiers)", typeof(void), typeof(QPoint), pos, typeof(uint), actions, typeof(QMimeData), data, typeof(uint), buttons, typeof(uint), modifiers);
        }
        public QPoint Pos() {
            return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
        }
        public uint MouseButtons() {
            return (uint) interceptor.Invoke("mouseButtons", "mouseButtons() const", typeof(uint));
        }
        public uint KeyboardModifiers() {
            return (uint) interceptor.Invoke("keyboardModifiers", "keyboardModifiers() const", typeof(uint));
        }
        public uint PossibleActions() {
            return (uint) interceptor.Invoke("possibleActions", "possibleActions() const", typeof(uint));
        }
        public Qt.DropAction ProposedAction() {
            return (Qt.DropAction) interceptor.Invoke("proposedAction", "proposedAction() const", typeof(Qt.DropAction));
        }
        public void AcceptProposedAction() {
            interceptor.Invoke("acceptProposedAction", "acceptProposedAction()", typeof(void));
        }
        public Qt.DropAction DropAction() {
            return (Qt.DropAction) interceptor.Invoke("dropAction", "dropAction() const", typeof(Qt.DropAction));
        }
        public void SetDropAction(Qt.DropAction action) {
            interceptor.Invoke("setDropAction$", "setDropAction(Qt::DropAction)", typeof(void), typeof(Qt.DropAction), action);
        }
        public QWidget Source() {
            return (QWidget) interceptor.Invoke("source", "source() const", typeof(QWidget));
        }
        public QMimeData MimeData() {
            return (QMimeData) interceptor.Invoke("mimeData", "mimeData() const", typeof(QMimeData));
        }
        [SmokeMethod("format(int) const")]
        public virtual string Format(int n) {
            return (string) interceptor.Invoke("format$", "format(int) const", typeof(string), typeof(int), n);
        }
        [SmokeMethod("format() const")]
        public virtual string Format() {
            return (string) interceptor.Invoke("format", "format() const", typeof(string));
        }
        [SmokeMethod("encodedData(const char*) const")]
        public virtual QByteArray EncodedData(string arg1) {
            return (QByteArray) interceptor.Invoke("encodedData$", "encodedData(const char*) const", typeof(QByteArray), typeof(string), arg1);
        }
        [SmokeMethod("provides(const char*) const")]
        public virtual bool Provides(string arg1) {
            return (bool) interceptor.Invoke("provides$", "provides(const char*) const", typeof(bool), typeof(string), arg1);
        }
        ~QDropEvent() {
            interceptor.Invoke("~QDropEvent", "~QDropEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDropEvent", "~QDropEvent()", typeof(void));
        }
    }
}
