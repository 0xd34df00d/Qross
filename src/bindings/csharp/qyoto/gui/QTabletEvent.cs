//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTabletEvent")]
    public class QTabletEvent : QInputEvent, IDisposable {
        protected QTabletEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTabletEvent), this);
        }
        public enum TabletDevice {
            NoDevice = 0,
            Puck = 1,
            Stylus = 2,
            Airbrush = 3,
            FourDMouse = 4,
            XFreeEraser = 5,
            RotationStylus = 6,
        }
        public enum PointerType {
            UnknownPointer = 0,
            Pen = 1,
            Cursor = 2,
            Eraser = 3,
        }
        public QTabletEvent(QEvent.TypeOf t, QPoint pos, QPoint globalPos, QPointF hiResGlobalPos, int device, int pointerType, double pressure, int xTilt, int yTilt, double tangentialPressure, double rotation, int z, uint keyState, long uniqueID) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTabletEvent$###$$$$$$$$$$", "QTabletEvent(QEvent::Type, const QPoint&, const QPoint&, const QPointF&, int, int, qreal, int, int, qreal, qreal, int, Qt::KeyboardModifiers, qint64)", typeof(void), typeof(QEvent.TypeOf), t, typeof(QPoint), pos, typeof(QPoint), globalPos, typeof(QPointF), hiResGlobalPos, typeof(int), device, typeof(int), pointerType, typeof(double), pressure, typeof(int), xTilt, typeof(int), yTilt, typeof(double), tangentialPressure, typeof(double), rotation, typeof(int), z, typeof(uint), keyState, typeof(long), uniqueID);
        }
        public QPoint Pos() {
            return (QPoint) interceptor.Invoke("pos", "pos() const", typeof(QPoint));
        }
        public QPoint GlobalPos() {
            return (QPoint) interceptor.Invoke("globalPos", "globalPos() const", typeof(QPoint));
        }
        public QPointF HiResGlobalPos() {
            return (QPointF) interceptor.Invoke("hiResGlobalPos", "hiResGlobalPos() const", typeof(QPointF));
        }
        public int X() {
            return (int) interceptor.Invoke("x", "x() const", typeof(int));
        }
        public int Y() {
            return (int) interceptor.Invoke("y", "y() const", typeof(int));
        }
        public int GlobalX() {
            return (int) interceptor.Invoke("globalX", "globalX() const", typeof(int));
        }
        public int GlobalY() {
            return (int) interceptor.Invoke("globalY", "globalY() const", typeof(int));
        }
        public double HiResGlobalX() {
            return (double) interceptor.Invoke("hiResGlobalX", "hiResGlobalX() const", typeof(double));
        }
        public double HiResGlobalY() {
            return (double) interceptor.Invoke("hiResGlobalY", "hiResGlobalY() const", typeof(double));
        }
        public QTabletEvent.TabletDevice Device() {
            return (QTabletEvent.TabletDevice) interceptor.Invoke("device", "device() const", typeof(QTabletEvent.TabletDevice));
        }
        public QTabletEvent.PointerType pointerType() {
            return (QTabletEvent.PointerType) interceptor.Invoke("pointerType", "pointerType() const", typeof(QTabletEvent.PointerType));
        }
        public long UniqueId() {
            return (long) interceptor.Invoke("uniqueId", "uniqueId() const", typeof(long));
        }
        public double Pressure() {
            return (double) interceptor.Invoke("pressure", "pressure() const", typeof(double));
        }
        public int Z() {
            return (int) interceptor.Invoke("z", "z() const", typeof(int));
        }
        public double TangentialPressure() {
            return (double) interceptor.Invoke("tangentialPressure", "tangentialPressure() const", typeof(double));
        }
        public double Rotation() {
            return (double) interceptor.Invoke("rotation", "rotation() const", typeof(double));
        }
        public int XTilt() {
            return (int) interceptor.Invoke("xTilt", "xTilt() const", typeof(int));
        }
        public int YTilt() {
            return (int) interceptor.Invoke("yTilt", "yTilt() const", typeof(int));
        }
        ~QTabletEvent() {
            interceptor.Invoke("~QTabletEvent", "~QTabletEvent()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTabletEvent", "~QTabletEvent()", typeof(void));
        }
    }
}
