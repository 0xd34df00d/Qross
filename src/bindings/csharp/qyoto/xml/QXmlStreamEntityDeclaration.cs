//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;

	[SmokeClass("QXmlStreamEntityDeclaration")]
	public class QXmlStreamEntityDeclaration : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QXmlStreamEntityDeclaration(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QXmlStreamEntityDeclaration), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QXmlStreamEntityDeclaration() {
			staticInterceptor = new SmokeInvocation(typeof(QXmlStreamEntityDeclaration), null);
		}
		public QXmlStreamEntityDeclaration() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlStreamEntityDeclaration", "QXmlStreamEntityDeclaration()", typeof(void));
		}
		public QXmlStreamEntityDeclaration(QXmlStreamEntityDeclaration arg1) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlStreamEntityDeclaration#", "QXmlStreamEntityDeclaration(const QXmlStreamEntityDeclaration&)", typeof(void), typeof(QXmlStreamEntityDeclaration), arg1);
		}
		public string Name() {
			return (string) interceptor.Invoke("name", "name() const", typeof(string));
		}
		public string NotationName() {
			return (string) interceptor.Invoke("notationName", "notationName() const", typeof(string));
		}
		public string SystemId() {
			return (string) interceptor.Invoke("systemId", "systemId() const", typeof(string));
		}
		public string PublicId() {
			return (string) interceptor.Invoke("publicId", "publicId() const", typeof(string));
		}
		public string Value() {
			return (string) interceptor.Invoke("value", "value() const", typeof(string));
		}
		public override bool Equals(object o) {
			if (!(o is QXmlStreamEntityDeclaration)) { return false; }
			return this == (QXmlStreamEntityDeclaration) o;
		}
		public override int GetHashCode() {
			return interceptor.GetHashCode();
		}
		~QXmlStreamEntityDeclaration() {
			interceptor.Invoke("~QXmlStreamEntityDeclaration", "~QXmlStreamEntityDeclaration()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QXmlStreamEntityDeclaration", "~QXmlStreamEntityDeclaration()", typeof(void));
		}
		public static bool operator==(QXmlStreamEntityDeclaration lhs, QXmlStreamEntityDeclaration other) {
			return (bool) staticInterceptor.Invoke("operator==#", "operator==(const QXmlStreamEntityDeclaration&) const", typeof(bool), typeof(QXmlStreamEntityDeclaration), lhs, typeof(QXmlStreamEntityDeclaration), other);
		}
		public static bool operator!=(QXmlStreamEntityDeclaration lhs, QXmlStreamEntityDeclaration other) {
			return !(bool) staticInterceptor.Invoke("operator==#", "operator==(const QXmlStreamEntityDeclaration&) const", typeof(bool), typeof(QXmlStreamEntityDeclaration), lhs, typeof(QXmlStreamEntityDeclaration), other);
		}
	}
}
