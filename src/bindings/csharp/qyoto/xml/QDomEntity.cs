//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDomEntity")]
    public class QDomEntity : QDomNode, IDisposable {
        protected QDomEntity(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomEntity), this);
        }
        public QDomEntity() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomEntity", "QDomEntity()", typeof(void));
        }
        public QDomEntity(QDomEntity x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomEntity#", "QDomEntity(const QDomEntity&)", typeof(void), typeof(QDomEntity), x);
        }
        public string PublicId() {
            return (string) interceptor.Invoke("publicId", "publicId() const", typeof(string));
        }
        public string SystemId() {
            return (string) interceptor.Invoke("systemId", "systemId() const", typeof(string));
        }
        public string NotationName() {
            return (string) interceptor.Invoke("notationName", "notationName() const", typeof(string));
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        ~QDomEntity() {
            interceptor.Invoke("~QDomEntity", "~QDomEntity()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomEntity", "~QDomEntity()", typeof(void));
        }
    }
}
