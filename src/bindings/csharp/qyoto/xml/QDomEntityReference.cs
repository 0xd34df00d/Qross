//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDomEntityReference")]
    public class QDomEntityReference : QDomNode, IDisposable {
        protected QDomEntityReference(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomEntityReference), this);
        }
        public QDomEntityReference() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomEntityReference", "QDomEntityReference()", typeof(void));
        }
        public QDomEntityReference(QDomEntityReference x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomEntityReference#", "QDomEntityReference(const QDomEntityReference&)", typeof(void), typeof(QDomEntityReference), x);
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        ~QDomEntityReference() {
            interceptor.Invoke("~QDomEntityReference", "~QDomEntityReference()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomEntityReference", "~QDomEntityReference()", typeof(void));
        }
    }
}
