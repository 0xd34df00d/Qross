//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDomDocumentType")]
    public class QDomDocumentType : QDomNode, IDisposable {
        protected QDomDocumentType(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomDocumentType), this);
        }
        public QDomDocumentType() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocumentType", "QDomDocumentType()", typeof(void));
        }
        public QDomDocumentType(QDomDocumentType x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocumentType#", "QDomDocumentType(const QDomDocumentType&)", typeof(void), typeof(QDomDocumentType), x);
        }
        public string Name() {
            return (string) interceptor.Invoke("name", "name() const", typeof(string));
        }
        public QDomNamedNodeMap Entities() {
            return (QDomNamedNodeMap) interceptor.Invoke("entities", "entities() const", typeof(QDomNamedNodeMap));
        }
        public QDomNamedNodeMap Notations() {
            return (QDomNamedNodeMap) interceptor.Invoke("notations", "notations() const", typeof(QDomNamedNodeMap));
        }
        public string PublicId() {
            return (string) interceptor.Invoke("publicId", "publicId() const", typeof(string));
        }
        public string SystemId() {
            return (string) interceptor.Invoke("systemId", "systemId() const", typeof(string));
        }
        public string InternalSubset() {
            return (string) interceptor.Invoke("internalSubset", "internalSubset() const", typeof(string));
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        ~QDomDocumentType() {
            interceptor.Invoke("~QDomDocumentType", "~QDomDocumentType()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomDocumentType", "~QDomDocumentType()", typeof(void));
        }
    }
}
