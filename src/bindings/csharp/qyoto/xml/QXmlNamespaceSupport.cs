//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Text;
    using System.Collections.Generic;
    [SmokeClass("QXmlNamespaceSupport")]
    public class QXmlNamespaceSupport : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QXmlNamespaceSupport(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QXmlNamespaceSupport), this);
        }
        public QXmlNamespaceSupport() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QXmlNamespaceSupport", "QXmlNamespaceSupport()", typeof(void));
        }
        public void SetPrefix(string arg1, string arg2) {
            interceptor.Invoke("setPrefix$$", "setPrefix(const QString&, const QString&)", typeof(void), typeof(string), arg1, typeof(string), arg2);
        }
        public string Prefix(string arg1) {
            return (string) interceptor.Invoke("prefix$", "prefix(const QString&) const", typeof(string), typeof(string), arg1);
        }
        public string Uri(string arg1) {
            return (string) interceptor.Invoke("uri$", "uri(const QString&) const", typeof(string), typeof(string), arg1);
        }
        public void SplitName(string arg1, StringBuilder arg2, StringBuilder arg3) {
            interceptor.Invoke("splitName$$$", "splitName(const QString&, QString&, QString&) const", typeof(void), typeof(string), arg1, typeof(StringBuilder), arg2, typeof(StringBuilder), arg3);
        }
        public void ProcessName(string arg1, bool arg2, StringBuilder arg3, StringBuilder arg4) {
            interceptor.Invoke("processName$$$$", "processName(const QString&, bool, QString&, QString&) const", typeof(void), typeof(string), arg1, typeof(bool), arg2, typeof(StringBuilder), arg3, typeof(StringBuilder), arg4);
        }
        public List<string> Prefixes() {
            return (List<string>) interceptor.Invoke("prefixes", "prefixes() const", typeof(List<string>));
        }
        public List<string> Prefixes(string arg1) {
            return (List<string>) interceptor.Invoke("prefixes$", "prefixes(const QString&) const", typeof(List<string>), typeof(string), arg1);
        }
        public void PushContext() {
            interceptor.Invoke("pushContext", "pushContext()", typeof(void));
        }
        public void PopContext() {
            interceptor.Invoke("popContext", "popContext()", typeof(void));
        }
        public void Reset() {
            interceptor.Invoke("reset", "reset()", typeof(void));
        }
        ~QXmlNamespaceSupport() {
            interceptor.Invoke("~QXmlNamespaceSupport", "~QXmlNamespaceSupport()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QXmlNamespaceSupport", "~QXmlNamespaceSupport()", typeof(void));
        }
    }
}
