//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDomNotation")]
    public class QDomNotation : QDomNode, IDisposable {
        protected QDomNotation(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomNotation), this);
        }
        public QDomNotation() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomNotation", "QDomNotation()", typeof(void));
        }
        public QDomNotation(QDomNotation x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomNotation#", "QDomNotation(const QDomNotation&)", typeof(void), typeof(QDomNotation), x);
        }
        public string PublicId() {
            return (string) interceptor.Invoke("publicId", "publicId() const", typeof(string));
        }
        public string SystemId() {
            return (string) interceptor.Invoke("systemId", "systemId() const", typeof(string));
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        ~QDomNotation() {
            interceptor.Invoke("~QDomNotation", "~QDomNotation()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomNotation", "~QDomNotation()", typeof(void));
        }
    }
}
