//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDomDocumentFragment")]
    public class QDomDocumentFragment : QDomNode, IDisposable {
        protected QDomDocumentFragment(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomDocumentFragment), this);
        }
        public QDomDocumentFragment() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocumentFragment", "QDomDocumentFragment()", typeof(void));
        }
        public QDomDocumentFragment(QDomDocumentFragment x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomDocumentFragment#", "QDomDocumentFragment(const QDomDocumentFragment&)", typeof(void), typeof(QDomDocumentFragment), x);
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        ~QDomDocumentFragment() {
            interceptor.Invoke("~QDomDocumentFragment", "~QDomDocumentFragment()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomDocumentFragment", "~QDomDocumentFragment()", typeof(void));
        }
    }
}
