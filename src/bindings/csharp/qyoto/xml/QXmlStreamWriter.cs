//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {

	using System;
	using System.Text;

	[SmokeClass("QXmlStreamWriter")]
	public class QXmlStreamWriter : Object, IDisposable {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QXmlStreamWriter(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QXmlStreamWriter), this);
		}
		[Q_PROPERTY("bool", "autoFormatting")]
		public bool AutoFormatting {
			get { return (bool) interceptor.Invoke("autoFormatting", "autoFormatting()", typeof(bool)); }
			set { interceptor.Invoke("setAutoFormatting$", "setAutoFormatting(bool)", typeof(void), typeof(bool), value); }
		}
		public QXmlStreamWriter() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlStreamWriter", "QXmlStreamWriter()", typeof(void));
		}
		public QXmlStreamWriter(QIODevice device) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlStreamWriter#", "QXmlStreamWriter(QIODevice*)", typeof(void), typeof(QIODevice), device);
		}
		public QXmlStreamWriter(QByteArray array) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlStreamWriter#", "QXmlStreamWriter(QByteArray*)", typeof(void), typeof(QByteArray), array);
		}
		public QXmlStreamWriter(StringBuilder arg1) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QXmlStreamWriter$", "QXmlStreamWriter(QString*)", typeof(void), typeof(StringBuilder), arg1);
		}
		public void SetDevice(QIODevice device) {
			interceptor.Invoke("setDevice#", "setDevice(QIODevice*)", typeof(void), typeof(QIODevice), device);
		}
		public QIODevice Device() {
			return (QIODevice) interceptor.Invoke("device", "device() const", typeof(QIODevice));
		}
		public void SetCodec(QTextCodec codec) {
			interceptor.Invoke("setCodec#", "setCodec(QTextCodec*)", typeof(void), typeof(QTextCodec), codec);
		}
		public void SetCodec(string codecName) {
			interceptor.Invoke("setCodec$", "setCodec(const char*)", typeof(void), typeof(string), codecName);
		}
		public QTextCodec Codec() {
			return (QTextCodec) interceptor.Invoke("codec", "codec() const", typeof(QTextCodec));
		}
		public void WriteAttribute(string qualifiedName, string value) {
			interceptor.Invoke("writeAttribute$$", "writeAttribute(const QString&, const QString&)", typeof(void), typeof(string), qualifiedName, typeof(string), value);
		}
		public void WriteAttribute(string namespaceUri, string name, string value) {
			interceptor.Invoke("writeAttribute$$$", "writeAttribute(const QString&, const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), name, typeof(string), value);
		}
		public void WriteAttribute(QXmlStreamAttribute attribute) {
			interceptor.Invoke("writeAttribute#", "writeAttribute(const QXmlStreamAttribute&)", typeof(void), typeof(QXmlStreamAttribute), attribute);
		}
		public void WriteAttributes(QXmlStreamAttributes attributes) {
			interceptor.Invoke("writeAttributes#", "writeAttributes(const QXmlStreamAttributes&)", typeof(void), typeof(QXmlStreamAttributes), attributes);
		}
		public void WriteCDATA(string text) {
			interceptor.Invoke("writeCDATA$", "writeCDATA(const QString&)", typeof(void), typeof(string), text);
		}
		public void WriteCharacters(string text) {
			interceptor.Invoke("writeCharacters$", "writeCharacters(const QString&)", typeof(void), typeof(string), text);
		}
		public void WriteComment(string text) {
			interceptor.Invoke("writeComment$", "writeComment(const QString&)", typeof(void), typeof(string), text);
		}
		public void WriteDTD(string dtd) {
			interceptor.Invoke("writeDTD$", "writeDTD(const QString&)", typeof(void), typeof(string), dtd);
		}
		public void WriteEmptyElement(string qualifiedName) {
			interceptor.Invoke("writeEmptyElement$", "writeEmptyElement(const QString&)", typeof(void), typeof(string), qualifiedName);
		}
		public void WriteEmptyElement(string namespaceUri, string name) {
			interceptor.Invoke("writeEmptyElement$$", "writeEmptyElement(const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), name);
		}
		public void WriteTextElement(string qualifiedName, string text) {
			interceptor.Invoke("writeTextElement$$", "writeTextElement(const QString&, const QString&)", typeof(void), typeof(string), qualifiedName, typeof(string), text);
		}
		public void WriteTextElement(string namespaceUri, string name, string text) {
			interceptor.Invoke("writeTextElement$$$", "writeTextElement(const QString&, const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), name, typeof(string), text);
		}
		public void WriteEndDocument() {
			interceptor.Invoke("writeEndDocument", "writeEndDocument()", typeof(void));
		}
		public void WriteEndElement() {
			interceptor.Invoke("writeEndElement", "writeEndElement()", typeof(void));
		}
		public void WriteEntityReference(string name) {
			interceptor.Invoke("writeEntityReference$", "writeEntityReference(const QString&)", typeof(void), typeof(string), name);
		}
		public void WriteNamespace(string namespaceUri, string prefix) {
			interceptor.Invoke("writeNamespace$$", "writeNamespace(const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), prefix);
		}
		public void WriteNamespace(string namespaceUri) {
			interceptor.Invoke("writeNamespace$", "writeNamespace(const QString&)", typeof(void), typeof(string), namespaceUri);
		}
		public void WriteDefaultNamespace(string namespaceUri) {
			interceptor.Invoke("writeDefaultNamespace$", "writeDefaultNamespace(const QString&)", typeof(void), typeof(string), namespaceUri);
		}
		public void WriteProcessingInstruction(string target, string data) {
			interceptor.Invoke("writeProcessingInstruction$$", "writeProcessingInstruction(const QString&, const QString&)", typeof(void), typeof(string), target, typeof(string), data);
		}
		public void WriteProcessingInstruction(string target) {
			interceptor.Invoke("writeProcessingInstruction$", "writeProcessingInstruction(const QString&)", typeof(void), typeof(string), target);
		}
		public void WriteStartDocument() {
			interceptor.Invoke("writeStartDocument", "writeStartDocument()", typeof(void));
		}
		public void WriteStartDocument(string version) {
			interceptor.Invoke("writeStartDocument$", "writeStartDocument(const QString&)", typeof(void), typeof(string), version);
		}
		public void WriteStartElement(string qualifiedName) {
			interceptor.Invoke("writeStartElement$", "writeStartElement(const QString&)", typeof(void), typeof(string), qualifiedName);
		}
		public void WriteStartElement(string namespaceUri, string name) {
			interceptor.Invoke("writeStartElement$$", "writeStartElement(const QString&, const QString&)", typeof(void), typeof(string), namespaceUri, typeof(string), name);
		}
		public void WriteCurrentToken(QXmlStreamReader reader) {
			interceptor.Invoke("writeCurrentToken#", "writeCurrentToken(const QXmlStreamReader&)", typeof(void), typeof(QXmlStreamReader), reader);
		}
		~QXmlStreamWriter() {
			interceptor.Invoke("~QXmlStreamWriter", "~QXmlStreamWriter()", typeof(void));
		}
		public void Dispose() {
			interceptor.Invoke("~QXmlStreamWriter", "~QXmlStreamWriter()", typeof(void));
		}
	}
}
