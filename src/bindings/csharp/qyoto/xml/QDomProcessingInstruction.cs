//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDomProcessingInstruction")]
    public class QDomProcessingInstruction : QDomNode, IDisposable {
        protected QDomProcessingInstruction(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDomProcessingInstruction), this);
        }
        public QDomProcessingInstruction() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomProcessingInstruction", "QDomProcessingInstruction()", typeof(void));
        }
        public QDomProcessingInstruction(QDomProcessingInstruction x) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDomProcessingInstruction#", "QDomProcessingInstruction(const QDomProcessingInstruction&)", typeof(void), typeof(QDomProcessingInstruction), x);
        }
        public string Target() {
            return (string) interceptor.Invoke("target", "target() const", typeof(string));
        }
        public string Data() {
            return (string) interceptor.Invoke("data", "data() const", typeof(string));
        }
        public void SetData(string d) {
            interceptor.Invoke("setData$", "setData(const QString&)", typeof(void), typeof(string), d);
        }
        public new QDomNode.NodeType NodeType() {
            return (QDomNode.NodeType) interceptor.Invoke("nodeType", "nodeType() const", typeof(QDomNode.NodeType));
        }
        ~QDomProcessingInstruction() {
            interceptor.Invoke("~QDomProcessingInstruction", "~QDomProcessingInstruction()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QDomProcessingInstruction", "~QDomProcessingInstruction()", typeof(void));
        }
    }
}
