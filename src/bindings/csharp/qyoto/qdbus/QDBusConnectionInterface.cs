//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDBusConnectionInterface")]
    public partial class QDBusConnectionInterface : QDBusAbstractInterface {
        protected QDBusConnectionInterface(Type dummy) : base((Type) null) {}
        private static SmokeInvocation staticInterceptor = null;
        static QDBusConnectionInterface() {
            staticInterceptor = new SmokeInvocation(typeof(QDBusConnectionInterface), null);
        }
        public enum ServiceQueueOptions {
            DontQueueService = 0,
            QueueService = 1,
            ReplaceExistingService = 2,
        }
        public enum ServiceReplacementOptions {
            DontAllowReplacement = 0,
            AllowReplacement = 1,
        }
        public enum RegisterServiceReply {
            ServiceNotRegistered = 0,
            ServiceRegistered = 1,
            ServiceQueued = 2,
        }
        // QDBusReply<QStringList> registeredServiceNames(); >>>> NOT CONVERTED
        // QDBusReply<bool> isServiceRegistered(const QString& arg1); >>>> NOT CONVERTED
        // QDBusReply<QString> serviceOwner(const QString& arg1); >>>> NOT CONVERTED
        // QDBusReply<bool> unregisterService(const QString& arg1); >>>> NOT CONVERTED
        // QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString& arg1,QDBusConnectionInterface::ServiceQueueOptions arg2,QDBusConnectionInterface::ServiceReplacementOptions arg3); >>>> NOT CONVERTED
        // QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString& arg1,QDBusConnectionInterface::ServiceQueueOptions arg2); >>>> NOT CONVERTED
        // QDBusReply<QDBusConnectionInterface::RegisterServiceReply> registerService(const QString& arg1); >>>> NOT CONVERTED
        // QDBusReply<uint> servicePid(const QString& arg1); >>>> NOT CONVERTED
        // QDBusReply<uint> serviceUid(const QString& arg1); >>>> NOT CONVERTED
        // QDBusReply<void> startService(const QString& arg1); >>>> NOT CONVERTED
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQDBusConnectionInterfaceSignals Emit {
            get { return (IQDBusConnectionInterfaceSignals) Q_EMIT; }
        }
    }

    public interface IQDBusConnectionInterfaceSignals : IQDBusAbstractInterfaceSignals {
    }
}
