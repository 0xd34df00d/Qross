//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QDBusPendingReplyData")]
    public class QDBusPendingReplyData : QDBusPendingCall {
        protected QDBusPendingReplyData(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QDBusPendingReplyData), this);
        }
        public QDBusPendingReplyData() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QDBusPendingReplyData", "QDBusPendingReplyData()", typeof(void));
        }
        protected void Assign(IQDBusPendingCall call) {
            interceptor.Invoke("assign#", "assign(const QDBusPendingCall&)", typeof(void), typeof(IQDBusPendingCall), call);
        }
        protected void Assign(QDBusMessage message) {
            interceptor.Invoke("assign#", "assign(const QDBusMessage&)", typeof(void), typeof(QDBusMessage), message);
        }
        protected QVariant ArgumentAt(int index) {
            return (QVariant) interceptor.Invoke("argumentAt$", "argumentAt(int) const", typeof(QVariant), typeof(int), index);
        }
        protected void SetMetaTypes(int count, ref int metaTypes) {
            StackItem[] stack = new StackItem[3];
            stack[1].s_int = count;
            stack[2].s_int = metaTypes;
            interceptor.Invoke("setMetaTypes$$", "setMetaTypes(int, const int*)", stack);
            metaTypes = stack[2].s_int;
            return;
        }
    }
}
