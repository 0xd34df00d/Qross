//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QNetworkCookieJar")]
    public class QNetworkCookieJar : QObject, IDisposable {
        protected QNetworkCookieJar(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QNetworkCookieJar), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QNetworkCookieJar() {
            staticInterceptor = new SmokeInvocation(typeof(QNetworkCookieJar), null);
        }
        public QNetworkCookieJar(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QNetworkCookieJar#", "QNetworkCookieJar(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QNetworkCookieJar() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QNetworkCookieJar", "QNetworkCookieJar()", typeof(void));
        }
        [SmokeMethod("cookiesForUrl(const QUrl&) const")]
        public virtual List<QNetworkCookie> CookiesForUrl(QUrl url) {
            return (List<QNetworkCookie>) interceptor.Invoke("cookiesForUrl#", "cookiesForUrl(const QUrl&) const", typeof(List<QNetworkCookie>), typeof(QUrl), url);
        }
        [SmokeMethod("setCookiesFromUrl(const QList<QNetworkCookie>&, const QUrl&)")]
        public virtual bool SetCookiesFromUrl(List<QNetworkCookie> cookieList, QUrl url) {
            return (bool) interceptor.Invoke("setCookiesFromUrl?#", "setCookiesFromUrl(const QList<QNetworkCookie>&, const QUrl&)", typeof(bool), typeof(List<QNetworkCookie>), cookieList, typeof(QUrl), url);
        }
        protected List<QNetworkCookie> AllCookies() {
            return (List<QNetworkCookie>) interceptor.Invoke("allCookies", "allCookies() const", typeof(List<QNetworkCookie>));
        }
        protected void SetAllCookies(List<QNetworkCookie> cookieList) {
            interceptor.Invoke("setAllCookies?", "setAllCookies(const QList<QNetworkCookie>&)", typeof(void), typeof(List<QNetworkCookie>), cookieList);
        }
        ~QNetworkCookieJar() {
            interceptor.Invoke("~QNetworkCookieJar", "~QNetworkCookieJar()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QNetworkCookieJar", "~QNetworkCookieJar()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQNetworkCookieJarSignals Emit {
            get { return (IQNetworkCookieJarSignals) Q_EMIT; }
        }
    }

    public interface IQNetworkCookieJarSignals : IQObjectSignals {
    }
}
