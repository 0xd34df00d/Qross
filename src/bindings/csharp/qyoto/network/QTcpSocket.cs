//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTcpSocket")]
    public class QTcpSocket : QAbstractSocket, IDisposable {
        protected QTcpSocket(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTcpSocket), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTcpSocket() {
            staticInterceptor = new SmokeInvocation(typeof(QTcpSocket), null);
        }
        // QTcpSocket* QTcpSocket(QTcpSocketPrivate& arg1,QObject* arg2); >>>> NOT CONVERTED
        // QTcpSocket* QTcpSocket(QTcpSocketPrivate& arg1); >>>> NOT CONVERTED
        public QTcpSocket(QObject parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTcpSocket#", "QTcpSocket(QObject*)", typeof(void), typeof(QObject), parent);
        }
        public QTcpSocket() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTcpSocket", "QTcpSocket()", typeof(void));
        }
        ~QTcpSocket() {
            interceptor.Invoke("~QTcpSocket", "~QTcpSocket()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTcpSocket", "~QTcpSocket()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQTcpSocketSignals Emit {
            get { return (IQTcpSocketSignals) Q_EMIT; }
        }
    }

    public interface IQTcpSocketSignals : IQAbstractSocketSignals {
    }
}
