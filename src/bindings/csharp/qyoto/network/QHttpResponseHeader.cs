//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QHttpResponseHeader")]
    public class QHttpResponseHeader : QHttpHeader, IDisposable {
        protected QHttpResponseHeader(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QHttpResponseHeader), this);
        }
        public QHttpResponseHeader() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader", "QHttpResponseHeader()", typeof(void));
        }
        public QHttpResponseHeader(QHttpResponseHeader header) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader#", "QHttpResponseHeader(const QHttpResponseHeader&)", typeof(void), typeof(QHttpResponseHeader), header);
        }
        public QHttpResponseHeader(string str) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader$", "QHttpResponseHeader(const QString&)", typeof(void), typeof(string), str);
        }
        public QHttpResponseHeader(int code, string text, int majorVer, int minorVer) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader$$$$", "QHttpResponseHeader(int, const QString&, int, int)", typeof(void), typeof(int), code, typeof(string), text, typeof(int), majorVer, typeof(int), minorVer);
        }
        public QHttpResponseHeader(int code, string text, int majorVer) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader$$$", "QHttpResponseHeader(int, const QString&, int)", typeof(void), typeof(int), code, typeof(string), text, typeof(int), majorVer);
        }
        public QHttpResponseHeader(int code, string text) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader$$", "QHttpResponseHeader(int, const QString&)", typeof(void), typeof(int), code, typeof(string), text);
        }
        public QHttpResponseHeader(int code) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QHttpResponseHeader$", "QHttpResponseHeader(int)", typeof(void), typeof(int), code);
        }
        public void SetStatusLine(int code, string text, int majorVer, int minorVer) {
            interceptor.Invoke("setStatusLine$$$$", "setStatusLine(int, const QString&, int, int)", typeof(void), typeof(int), code, typeof(string), text, typeof(int), majorVer, typeof(int), minorVer);
        }
        public void SetStatusLine(int code, string text, int majorVer) {
            interceptor.Invoke("setStatusLine$$$", "setStatusLine(int, const QString&, int)", typeof(void), typeof(int), code, typeof(string), text, typeof(int), majorVer);
        }
        public void SetStatusLine(int code, string text) {
            interceptor.Invoke("setStatusLine$$", "setStatusLine(int, const QString&)", typeof(void), typeof(int), code, typeof(string), text);
        }
        public void SetStatusLine(int code) {
            interceptor.Invoke("setStatusLine$", "setStatusLine(int)", typeof(void), typeof(int), code);
        }
        public int StatusCode() {
            return (int) interceptor.Invoke("statusCode", "statusCode() const", typeof(int));
        }
        public string ReasonPhrase() {
            return (string) interceptor.Invoke("reasonPhrase", "reasonPhrase() const", typeof(string));
        }
        [SmokeMethod("majorVersion() const")]
        public override int MajorVersion() {
            return (int) interceptor.Invoke("majorVersion", "majorVersion() const", typeof(int));
        }
        [SmokeMethod("minorVersion() const")]
        public override int MinorVersion() {
            return (int) interceptor.Invoke("minorVersion", "minorVersion() const", typeof(int));
        }
        [SmokeMethod("toString() const")]
        public new string ToString() {
            return (string) interceptor.Invoke("toString", "toString() const", typeof(string));
        }
        [SmokeMethod("parseLine(const QString&, int)")]
        protected override bool ParseLine(string line, int number) {
            return (bool) interceptor.Invoke("parseLine$$", "parseLine(const QString&, int)", typeof(bool), typeof(string), line, typeof(int), number);
        }
        ~QHttpResponseHeader() {
            interceptor.Invoke("~QHttpResponseHeader", "~QHttpResponseHeader()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QHttpResponseHeader", "~QHttpResponseHeader()", typeof(void));
        }
    }
}
