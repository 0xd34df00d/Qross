//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSvgWidget")]
    public class QSvgWidget : QWidget, IDisposable {
        protected QSvgWidget(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSvgWidget), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QSvgWidget() {
            staticInterceptor = new SmokeInvocation(typeof(QSvgWidget), null);
        }
        public QSvgWidget(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSvgWidget#", "QSvgWidget(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public QSvgWidget() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSvgWidget", "QSvgWidget()", typeof(void));
        }
        public QSvgWidget(string file, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSvgWidget$#", "QSvgWidget(const QString&, QWidget*)", typeof(void), typeof(string), file, typeof(QWidget), parent);
        }
        public QSvgWidget(string file) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSvgWidget$", "QSvgWidget(const QString&)", typeof(void), typeof(string), file);
        }
        public QSvgRenderer Renderer() {
            return (QSvgRenderer) interceptor.Invoke("renderer", "renderer() const", typeof(QSvgRenderer));
        }
        [SmokeMethod("sizeHint() const")]
        public override QSize SizeHint() {
            return (QSize) interceptor.Invoke("sizeHint", "sizeHint() const", typeof(QSize));
        }
        [Q_SLOT("void load(QString)")]
        public void Load(string file) {
            interceptor.Invoke("load$", "load(const QString&)", typeof(void), typeof(string), file);
        }
        [Q_SLOT("void load(QByteArray)")]
        public void Load(QByteArray contents) {
            interceptor.Invoke("load#", "load(const QByteArray&)", typeof(void), typeof(QByteArray), contents);
        }
        [SmokeMethod("paintEvent(QPaintEvent*)")]
        protected override void PaintEvent(QPaintEvent arg1) {
            interceptor.Invoke("paintEvent#", "paintEvent(QPaintEvent*)", typeof(void), typeof(QPaintEvent), arg1);
        }
        ~QSvgWidget() {
            interceptor.Invoke("~QSvgWidget", "~QSvgWidget()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSvgWidget", "~QSvgWidget()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        protected new IQSvgWidgetSignals Emit {
            get { return (IQSvgWidgetSignals) Q_EMIT; }
        }
    }

    public interface IQSvgWidgetSignals : IQWidgetSignals {
    }
}
