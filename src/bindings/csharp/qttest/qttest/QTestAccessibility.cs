//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    using System.Collections.Generic;
    [SmokeClass("QTestAccessibility")]
    public class QTestAccessibility : Object {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTestAccessibility(Type dummy) {}
        private static SmokeInvocation staticInterceptor = null;
        static QTestAccessibility() {
            staticInterceptor = new SmokeInvocation(typeof(QTestAccessibility), null);
        }
        public static void Initialize() {
            staticInterceptor.Invoke("initialize", "initialize()", typeof(void));
        }
        public static void Cleanup() {
            staticInterceptor.Invoke("cleanup", "cleanup()", typeof(void));
        }
        public static void ClearEvents() {
            staticInterceptor.Invoke("clearEvents", "clearEvents()", typeof(void));
        }
        public static List<QTestAccessibilityEvent> Events() {
            return (List<QTestAccessibilityEvent>) staticInterceptor.Invoke("events", "events()", typeof(List<QTestAccessibilityEvent>));
        }
        public static bool VerifyEvent(QTestAccessibilityEvent ev) {
            return (bool) staticInterceptor.Invoke("verifyEvent#", "verifyEvent(const QTestAccessibilityEvent&)", typeof(bool), typeof(QTestAccessibilityEvent), ev);
        }
        public static bool VerifyEvent(QObject o, int c, int e) {
            return (bool) staticInterceptor.Invoke("verifyEvent#$$", "verifyEvent(QObject*, int, int)", typeof(bool), typeof(QObject), o, typeof(int), c, typeof(int), e);
        }
    }
}
