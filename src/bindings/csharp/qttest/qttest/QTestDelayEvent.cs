//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTestDelayEvent")]
    public class QTestDelayEvent : QTestEvent, IDisposable {
        protected QTestDelayEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTestDelayEvent), this);
        }
        public QTestDelayEvent(int msecs) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTestDelayEvent$", "QTestDelayEvent(int)", typeof(void), typeof(int), msecs);
        }
        [SmokeMethod("clone() const")]
        public override QTestEvent Clone() {
            return (QTestEvent) interceptor.Invoke("clone", "clone() const", typeof(QTestEvent));
        }
        [SmokeMethod("simulate(QWidget*)")]
        public override void Simulate(QWidget arg1) {
            interceptor.Invoke("simulate#", "simulate(QWidget*)", typeof(void), typeof(QWidget), arg1);
        }
        ~QTestDelayEvent() {
            interceptor.Invoke("~QTestDelayEvent", "~QTestDelayEvent()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTestDelayEvent", "~QTestDelayEvent()", typeof(void));
        }
    }
}
