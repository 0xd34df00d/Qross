//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTestEventLoop")]
    public class QTestEventLoop : QObject, IDisposable {
        protected QTestEventLoop(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTestEventLoop), this);
        }
        private static SmokeInvocation staticInterceptor = null;
        static QTestEventLoop() {
            staticInterceptor = new SmokeInvocation(typeof(QTestEventLoop), null);
        }
        public QTestEventLoop(QObject aParent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTestEventLoop#", "QTestEventLoop(QObject*)", typeof(void), typeof(QObject), aParent);
        }
        public QTestEventLoop() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTestEventLoop", "QTestEventLoop()", typeof(void));
        }
        public void EnterLoop(int secs) {
            interceptor.Invoke("enterLoop$", "enterLoop(int)", typeof(void), typeof(int), secs);
        }
        public void ChangeInterval(int secs) {
            interceptor.Invoke("changeInterval$", "changeInterval(int)", typeof(void), typeof(int), secs);
        }
        public bool Timeout() {
            return (bool) interceptor.Invoke("timeout", "timeout() const", typeof(bool));
        }
        [Q_SLOT("void exitLoop()")]
        public void ExitLoop() {
            interceptor.Invoke("exitLoop", "exitLoop()", typeof(void));
        }
        [SmokeMethod("timerEvent(QTimerEvent*)")]
        protected override void TimerEvent(QTimerEvent e) {
            interceptor.Invoke("timerEvent#", "timerEvent(QTimerEvent*)", typeof(void), typeof(QTimerEvent), e);
        }
        ~QTestEventLoop() {
            interceptor.Invoke("~QTestEventLoop", "~QTestEventLoop()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QTestEventLoop", "~QTestEventLoop()", typeof(void));
        }
        public static new string Tr(string s, string c) {
            return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
        }
        public static new string Tr(string s) {
            return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
        }
        public static QTestEventLoop Instance() {
            return (QTestEventLoop) staticInterceptor.Invoke("instance", "instance()", typeof(QTestEventLoop));
        }
        protected new IQTestEventLoopSignals Emit {
            get { return (IQTestEventLoopSignals) Q_EMIT; }
        }
    }

    public interface IQTestEventLoopSignals : IQObjectSignals {
    }
}
