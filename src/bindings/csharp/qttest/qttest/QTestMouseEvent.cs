//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTestMouseEvent")]
    public class QTestMouseEvent : QTestEvent, IDisposable {
        protected QTestMouseEvent(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTestMouseEvent), this);
        }
        public QTestMouseEvent(QTest.MouseAction action, Qt.MouseButton button, uint modifiers, QPoint position, int delay) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTestMouseEvent$$$#$", "QTestMouseEvent(QTest::MouseAction, Qt::MouseButton, Qt::KeyboardModifiers, QPoint, int)", typeof(void), typeof(QTest.MouseAction), action, typeof(Qt.MouseButton), button, typeof(uint), modifiers, typeof(QPoint), position, typeof(int), delay);
        }
        [SmokeMethod("clone() const")]
        public override QTestEvent Clone() {
            return (QTestEvent) interceptor.Invoke("clone", "clone() const", typeof(QTestEvent));
        }
        [SmokeMethod("simulate(QWidget*)")]
        public override void Simulate(QWidget w) {
            interceptor.Invoke("simulate#", "simulate(QWidget*)", typeof(void), typeof(QWidget), w);
        }
        ~QTestMouseEvent() {
            interceptor.Invoke("~QTestMouseEvent", "~QTestMouseEvent()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTestMouseEvent", "~QTestMouseEvent()", typeof(void));
        }
    }
}
