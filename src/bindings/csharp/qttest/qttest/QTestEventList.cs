//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QTestEventList")]
    public class QTestEventList : Object, IDisposable {
        protected SmokeInvocation interceptor = null;
        private IntPtr smokeObject;
        protected QTestEventList(Type dummy) {}
        protected void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QTestEventList), this);
        }
        public QTestEventList() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTestEventList", "QTestEventList()", typeof(void));
        }
        public QTestEventList(QTestEventList other) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QTestEventList#", "QTestEventList(const QTestEventList&)", typeof(void), typeof(QTestEventList), other);
        }
        public void Clear() {
            interceptor.Invoke("clear", "clear()", typeof(void));
        }
        public void AddKeyClick(Qt.Key qtKey, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyClick$$$", "addKeyClick(Qt::Key, Qt::KeyboardModifiers, int)", typeof(void), typeof(Qt.Key), qtKey, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyClick(Qt.Key qtKey, uint modifiers) {
            interceptor.Invoke("addKeyClick$$", "addKeyClick(Qt::Key, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.Key), qtKey, typeof(uint), modifiers);
        }
        public void AddKeyClick(Qt.Key qtKey) {
            interceptor.Invoke("addKeyClick$", "addKeyClick(Qt::Key)", typeof(void), typeof(Qt.Key), qtKey);
        }
        public void AddKeyPress(Qt.Key qtKey, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyPress$$$", "addKeyPress(Qt::Key, Qt::KeyboardModifiers, int)", typeof(void), typeof(Qt.Key), qtKey, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyPress(Qt.Key qtKey, uint modifiers) {
            interceptor.Invoke("addKeyPress$$", "addKeyPress(Qt::Key, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.Key), qtKey, typeof(uint), modifiers);
        }
        public void AddKeyPress(Qt.Key qtKey) {
            interceptor.Invoke("addKeyPress$", "addKeyPress(Qt::Key)", typeof(void), typeof(Qt.Key), qtKey);
        }
        public void AddKeyRelease(Qt.Key qtKey, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyRelease$$$", "addKeyRelease(Qt::Key, Qt::KeyboardModifiers, int)", typeof(void), typeof(Qt.Key), qtKey, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyRelease(Qt.Key qtKey, uint modifiers) {
            interceptor.Invoke("addKeyRelease$$", "addKeyRelease(Qt::Key, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.Key), qtKey, typeof(uint), modifiers);
        }
        public void AddKeyRelease(Qt.Key qtKey) {
            interceptor.Invoke("addKeyRelease$", "addKeyRelease(Qt::Key)", typeof(void), typeof(Qt.Key), qtKey);
        }
        public void AddKeyEvent(QTest.KeyAction action, Qt.Key qtKey, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyEvent$$$$", "addKeyEvent(QTest::KeyAction, Qt::Key, Qt::KeyboardModifiers, int)", typeof(void), typeof(QTest.KeyAction), action, typeof(Qt.Key), qtKey, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyEvent(QTest.KeyAction action, Qt.Key qtKey, uint modifiers) {
            interceptor.Invoke("addKeyEvent$$$", "addKeyEvent(QTest::KeyAction, Qt::Key, Qt::KeyboardModifiers)", typeof(void), typeof(QTest.KeyAction), action, typeof(Qt.Key), qtKey, typeof(uint), modifiers);
        }
        public void AddKeyEvent(QTest.KeyAction action, Qt.Key qtKey) {
            interceptor.Invoke("addKeyEvent$$", "addKeyEvent(QTest::KeyAction, Qt::Key)", typeof(void), typeof(QTest.KeyAction), action, typeof(Qt.Key), qtKey);
        }
        public void AddKeyClick(char ascii, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyClick$$$", "addKeyClick(char, Qt::KeyboardModifiers, int)", typeof(void), typeof(char), ascii, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyClick(char ascii, uint modifiers) {
            interceptor.Invoke("addKeyClick$$", "addKeyClick(char, Qt::KeyboardModifiers)", typeof(void), typeof(char), ascii, typeof(uint), modifiers);
        }
        public void AddKeyClick(char ascii) {
            interceptor.Invoke("addKeyClick$", "addKeyClick(char)", typeof(void), typeof(char), ascii);
        }
        public void AddKeyPress(char ascii, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyPress$$$", "addKeyPress(char, Qt::KeyboardModifiers, int)", typeof(void), typeof(char), ascii, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyPress(char ascii, uint modifiers) {
            interceptor.Invoke("addKeyPress$$", "addKeyPress(char, Qt::KeyboardModifiers)", typeof(void), typeof(char), ascii, typeof(uint), modifiers);
        }
        public void AddKeyPress(char ascii) {
            interceptor.Invoke("addKeyPress$", "addKeyPress(char)", typeof(void), typeof(char), ascii);
        }
        public void AddKeyRelease(char ascii, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyRelease$$$", "addKeyRelease(char, Qt::KeyboardModifiers, int)", typeof(void), typeof(char), ascii, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyRelease(char ascii, uint modifiers) {
            interceptor.Invoke("addKeyRelease$$", "addKeyRelease(char, Qt::KeyboardModifiers)", typeof(void), typeof(char), ascii, typeof(uint), modifiers);
        }
        public void AddKeyRelease(char ascii) {
            interceptor.Invoke("addKeyRelease$", "addKeyRelease(char)", typeof(void), typeof(char), ascii);
        }
        public void AddKeyClicks(string keys, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyClicks$$$", "addKeyClicks(const QString&, Qt::KeyboardModifiers, int)", typeof(void), typeof(string), keys, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyClicks(string keys, uint modifiers) {
            interceptor.Invoke("addKeyClicks$$", "addKeyClicks(const QString&, Qt::KeyboardModifiers)", typeof(void), typeof(string), keys, typeof(uint), modifiers);
        }
        public void AddKeyClicks(string keys) {
            interceptor.Invoke("addKeyClicks$", "addKeyClicks(const QString&)", typeof(void), typeof(string), keys);
        }
        public void AddKeyEvent(QTest.KeyAction action, char ascii, uint modifiers, int msecs) {
            interceptor.Invoke("addKeyEvent$$$$", "addKeyEvent(QTest::KeyAction, char, Qt::KeyboardModifiers, int)", typeof(void), typeof(QTest.KeyAction), action, typeof(char), ascii, typeof(uint), modifiers, typeof(int), msecs);
        }
        public void AddKeyEvent(QTest.KeyAction action, char ascii, uint modifiers) {
            interceptor.Invoke("addKeyEvent$$$", "addKeyEvent(QTest::KeyAction, char, Qt::KeyboardModifiers)", typeof(void), typeof(QTest.KeyAction), action, typeof(char), ascii, typeof(uint), modifiers);
        }
        public void AddKeyEvent(QTest.KeyAction action, char ascii) {
            interceptor.Invoke("addKeyEvent$$", "addKeyEvent(QTest::KeyAction, char)", typeof(void), typeof(QTest.KeyAction), action, typeof(char), ascii);
        }
        public void AddMousePress(Qt.MouseButton button, uint stateKey, QPoint pos, int delay) {
            interceptor.Invoke("addMousePress$$#$", "addMousePress(Qt::MouseButton, Qt::KeyboardModifiers, QPoint, int)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos, typeof(int), delay);
        }
        public void AddMousePress(Qt.MouseButton button, uint stateKey, QPoint pos) {
            interceptor.Invoke("addMousePress$$#", "addMousePress(Qt::MouseButton, Qt::KeyboardModifiers, QPoint)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos);
        }
        public void AddMousePress(Qt.MouseButton button, uint stateKey) {
            interceptor.Invoke("addMousePress$$", "addMousePress(Qt::MouseButton, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey);
        }
        public void AddMousePress(Qt.MouseButton button) {
            interceptor.Invoke("addMousePress$", "addMousePress(Qt::MouseButton)", typeof(void), typeof(Qt.MouseButton), button);
        }
        public void AddMouseRelease(Qt.MouseButton button, uint stateKey, QPoint pos, int delay) {
            interceptor.Invoke("addMouseRelease$$#$", "addMouseRelease(Qt::MouseButton, Qt::KeyboardModifiers, QPoint, int)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos, typeof(int), delay);
        }
        public void AddMouseRelease(Qt.MouseButton button, uint stateKey, QPoint pos) {
            interceptor.Invoke("addMouseRelease$$#", "addMouseRelease(Qt::MouseButton, Qt::KeyboardModifiers, QPoint)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos);
        }
        public void AddMouseRelease(Qt.MouseButton button, uint stateKey) {
            interceptor.Invoke("addMouseRelease$$", "addMouseRelease(Qt::MouseButton, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey);
        }
        public void AddMouseRelease(Qt.MouseButton button) {
            interceptor.Invoke("addMouseRelease$", "addMouseRelease(Qt::MouseButton)", typeof(void), typeof(Qt.MouseButton), button);
        }
        public void AddMouseClick(Qt.MouseButton button, uint stateKey, QPoint pos, int delay) {
            interceptor.Invoke("addMouseClick$$#$", "addMouseClick(Qt::MouseButton, Qt::KeyboardModifiers, QPoint, int)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos, typeof(int), delay);
        }
        public void AddMouseClick(Qt.MouseButton button, uint stateKey, QPoint pos) {
            interceptor.Invoke("addMouseClick$$#", "addMouseClick(Qt::MouseButton, Qt::KeyboardModifiers, QPoint)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos);
        }
        public void AddMouseClick(Qt.MouseButton button, uint stateKey) {
            interceptor.Invoke("addMouseClick$$", "addMouseClick(Qt::MouseButton, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey);
        }
        public void AddMouseClick(Qt.MouseButton button) {
            interceptor.Invoke("addMouseClick$", "addMouseClick(Qt::MouseButton)", typeof(void), typeof(Qt.MouseButton), button);
        }
        public void AddMouseDClick(Qt.MouseButton button, uint stateKey, QPoint pos, int delay) {
            interceptor.Invoke("addMouseDClick$$#$", "addMouseDClick(Qt::MouseButton, Qt::KeyboardModifiers, QPoint, int)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos, typeof(int), delay);
        }
        public void AddMouseDClick(Qt.MouseButton button, uint stateKey, QPoint pos) {
            interceptor.Invoke("addMouseDClick$$#", "addMouseDClick(Qt::MouseButton, Qt::KeyboardModifiers, QPoint)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey, typeof(QPoint), pos);
        }
        public void AddMouseDClick(Qt.MouseButton button, uint stateKey) {
            interceptor.Invoke("addMouseDClick$$", "addMouseDClick(Qt::MouseButton, Qt::KeyboardModifiers)", typeof(void), typeof(Qt.MouseButton), button, typeof(uint), stateKey);
        }
        public void AddMouseDClick(Qt.MouseButton button) {
            interceptor.Invoke("addMouseDClick$", "addMouseDClick(Qt::MouseButton)", typeof(void), typeof(Qt.MouseButton), button);
        }
        public void AddMouseMove(QPoint pos, int delay) {
            interceptor.Invoke("addMouseMove#$", "addMouseMove(QPoint, int)", typeof(void), typeof(QPoint), pos, typeof(int), delay);
        }
        public void AddMouseMove(QPoint pos) {
            interceptor.Invoke("addMouseMove#", "addMouseMove(QPoint)", typeof(void), typeof(QPoint), pos);
        }
        public void AddMouseMove() {
            interceptor.Invoke("addMouseMove", "addMouseMove()", typeof(void));
        }
        public void AddDelay(int msecs) {
            interceptor.Invoke("addDelay$", "addDelay(int)", typeof(void), typeof(int), msecs);
        }
        public void Simulate(QWidget w) {
            interceptor.Invoke("simulate#", "simulate(QWidget*)", typeof(void), typeof(QWidget), w);
        }
        ~QTestEventList() {
            interceptor.Invoke("~QTestEventList", "~QTestEventList()", typeof(void));
        }
        public void Dispose() {
            interceptor.Invoke("~QTestEventList", "~QTestEventList()", typeof(void));
        }
    }
}
