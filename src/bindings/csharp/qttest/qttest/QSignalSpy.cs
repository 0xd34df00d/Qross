//Auto-generated by kalyptus. DO NOT EDIT.
namespace Qyoto {
    using System;
    [SmokeClass("QSignalSpy")]
    public class QSignalSpy : QObject, IDisposable {
        protected QSignalSpy(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(QSignalSpy), this);
        }
        public QSignalSpy(QObject arg1, string aSignal) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("QSignalSpy#$", "QSignalSpy(QObject*, const char*)", typeof(void), typeof(QObject), arg1, typeof(string), aSignal);
        }
        public bool IsValid() {
            return (bool) interceptor.Invoke("isValid", "isValid() const", typeof(bool));
        }
        public QByteArray Signal() {
            return (QByteArray) interceptor.Invoke("signal", "signal() const", typeof(QByteArray));
        }
        ~QSignalSpy() {
            interceptor.Invoke("~QSignalSpy", "~QSignalSpy()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~QSignalSpy", "~QSignalSpy()", typeof(void));
        }
        protected new IQSignalSpySignals Emit {
            get { return (IQSignalSpySignals) Q_EMIT; }
        }
    }

    public interface IQSignalSpySignals : IQObjectSignals {
    }
}
