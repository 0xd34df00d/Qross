//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciLexerHTML")]
	public class QsciLexerHTML : QsciLexer, IDisposable {
 		protected QsciLexerHTML(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciLexerHTML), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QsciLexerHTML() {
			staticInterceptor = new SmokeInvocation(typeof(QsciLexerHTML), null);
		}
		public const int Default = 0;
		public const int Tag = 1;
		public const int UnknownTag = 2;
		public const int Attribute = 3;
		public const int UnknownAttribute = 4;
		public const int HTMLNumber = 5;
		public const int HTMLDoubleQuotedString = 6;
		public const int HTMLSingleQuotedString = 7;
		public const int OtherInTag = 8;
		public const int HTMLComment = 9;
		public const int Entity = 10;
		public const int XMLTagEnd = 11;
		public const int XMLStart = 12;
		public const int XMLEnd = 13;
		public const int Script = 14;
		public const int ASPAtStart = 15;
		public const int ASPStart = 16;
		public const int CDATA = 17;
		public const int PHPStart = 18;
		public const int HTMLValue = 19;
		public const int ASPXCComment = 20;
		public const int SGMLDefault = 21;
		public const int SGMLCommand = 22;
		public const int SGMLParameter = 23;
		public const int SGMLDoubleQuotedString = 24;
		public const int SGMLSingleQuotedString = 25;
		public const int SGMLError = 26;
		public const int SGMLSpecial = 27;
		public const int SGMLEntity = 28;
		public const int SGMLComment = 29;
		public const int SGMLParameterComment = 30;
		public const int SGMLBlockDefault = 31;
		public const int JavaScriptStart = 40;
		public const int JavaScriptDefault = 41;
		public const int JavaScriptComment = 42;
		public const int JavaScriptCommentLine = 43;
		public const int JavaScriptCommentDoc = 44;
		public const int JavaScriptNumber = 45;
		public const int JavaScriptWord = 46;
		public const int JavaScriptKeyword = 47;
		public const int JavaScriptDoubleQuotedString = 48;
		public const int JavaScriptSingleQuotedString = 49;
		public const int JavaScriptSymbol = 50;
		public const int JavaScriptUnclosedString = 51;
		public const int JavaScriptRegex = 52;
		public const int ASPJavaScriptStart = 55;
		public const int ASPJavaScriptDefault = 56;
		public const int ASPJavaScriptComment = 57;
		public const int ASPJavaScriptCommentLine = 58;
		public const int ASPJavaScriptCommentDoc = 59;
		public const int ASPJavaScriptNumber = 60;
		public const int ASPJavaScriptWord = 61;
		public const int ASPJavaScriptKeyword = 62;
		public const int ASPJavaScriptDoubleQuotedString = 63;
		public const int ASPJavaScriptSingleQuotedString = 64;
		public const int ASPJavaScriptSymbol = 65;
		public const int ASPJavaScriptUnclosedString = 66;
		public const int ASPJavaScriptRegex = 67;
		public const int VBScriptStart = 70;
		public const int VBScriptDefault = 71;
		public const int VBScriptComment = 72;
		public const int VBScriptNumber = 73;
		public const int VBScriptKeyword = 74;
		public const int VBScriptString = 75;
		public const int VBScriptIdentifier = 76;
		public const int VBScriptUnclosedString = 77;
		public const int ASPVBScriptStart = 80;
		public const int ASPVBScriptDefault = 81;
		public const int ASPVBScriptComment = 82;
		public const int ASPVBScriptNumber = 83;
		public const int ASPVBScriptKeyword = 84;
		public const int ASPVBScriptString = 85;
		public const int ASPVBScriptIdentifier = 86;
		public const int ASPVBScriptUnclosedString = 87;
		public const int PythonStart = 90;
		public const int PythonDefault = 91;
		public const int PythonComment = 92;
		public const int PythonNumber = 93;
		public const int PythonDoubleQuotedString = 94;
		public const int PythonSingleQuotedString = 95;
		public const int PythonKeyword = 96;
		public const int PythonTripleSingleQuotedString = 97;
		public const int PythonTripleDoubleQuotedString = 98;
		public const int PythonClassName = 99;
		public const int PythonFunctionMethodName = 100;
		public const int PythonOperator = 101;
		public const int PythonIdentifier = 102;
		public const int ASPPythonStart = 105;
		public const int ASPPythonDefault = 106;
		public const int ASPPythonComment = 107;
		public const int ASPPythonNumber = 108;
		public const int ASPPythonDoubleQuotedString = 109;
		public const int ASPPythonSingleQuotedString = 110;
		public const int ASPPythonKeyword = 111;
		public const int ASPPythonTripleSingleQuotedString = 112;
		public const int ASPPythonTripleDoubleQuotedString = 113;
		public const int ASPPythonClassName = 114;
		public const int ASPPythonFunctionMethodName = 115;
		public const int ASPPythonOperator = 116;
		public const int ASPPythonIdentifier = 117;
		public const int PHPDefault = 118;
		public const int PHPDoubleQuotedString = 119;
		public const int PHPSingleQuotedString = 120;
		public const int PHPKeyword = 121;
		public const int PHPNumber = 122;
		public const int PHPVariable = 123;
		public const int PHPComment = 124;
		public const int PHPCommentLine = 125;
		public const int PHPDoubleQuotedVariable = 126;
		public const int PHPOperator = 127;

		public QsciLexerHTML(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerHTML#", "QsciLexerHTML(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QsciLexerHTML() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerHTML", "QsciLexerHTML()", typeof(void));
		}
		[SmokeMethod("language() const")]
		public override string Language() {
			return (string) interceptor.Invoke("language", "language() const", typeof(string));
		}
		[SmokeMethod("lexer() const")]
		public override string Lexer() {
			return (string) interceptor.Invoke("lexer", "lexer() const", typeof(string));
		}
		[SmokeMethod("wordCharacters() const")]
		public override string WordCharacters() {
			return (string) interceptor.Invoke("wordCharacters", "wordCharacters() const", typeof(string));
		}
		[SmokeMethod("defaultColor(int) const")]
		public override QColor DefaultColor(int style) {
			return (QColor) interceptor.Invoke("defaultColor$", "defaultColor(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("defaultEolFill(int) const")]
		public override bool DefaultEolFill(int style) {
			return (bool) interceptor.Invoke("defaultEolFill$", "defaultEolFill(int) const", typeof(bool), typeof(int), style);
		}
		[SmokeMethod("defaultFont(int) const")]
		public override QFont DefaultFont(int style) {
			return (QFont) interceptor.Invoke("defaultFont$", "defaultFont(int) const", typeof(QFont), typeof(int), style);
		}
		[SmokeMethod("defaultPaper(int) const")]
		public override QColor DefaultPaper(int style) {
			return (QColor) interceptor.Invoke("defaultPaper$", "defaultPaper(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("keywords(int) const")]
		public override string Keywords(int set) {
			return (string) interceptor.Invoke("keywords$", "keywords(int) const", typeof(string), typeof(int), set);
		}
		[SmokeMethod("description(int) const")]
		public override string Description(int style) {
			return (string) interceptor.Invoke("description$", "description(int) const", typeof(string), typeof(int), style);
		}
		[SmokeMethod("refreshProperties()")]
		public override void RefreshProperties() {
			interceptor.Invoke("refreshProperties", "refreshProperties()", typeof(void));
		}
		public bool FoldCompact() {
			return (bool) interceptor.Invoke("foldCompact", "foldCompact() const", typeof(bool));
		}
		public bool FoldPreprocessor() {
			return (bool) interceptor.Invoke("foldPreprocessor", "foldPreprocessor() const", typeof(bool));
		}
		public bool CaseSensitiveTags() {
			return (bool) interceptor.Invoke("caseSensitiveTags", "caseSensitiveTags() const", typeof(bool));
		}
		[Q_SLOT("void setFoldCompact(bool)")]
		[SmokeMethod("setFoldCompact(bool)")]
		public virtual void SetFoldCompact(bool fold) {
			interceptor.Invoke("setFoldCompact$", "setFoldCompact(bool)", typeof(void), typeof(bool), fold);
		}
		[Q_SLOT("void setFoldPreprocessor(bool)")]
		[SmokeMethod("setFoldPreprocessor(bool)")]
		public virtual void SetFoldPreprocessor(bool fold) {
			interceptor.Invoke("setFoldPreprocessor$", "setFoldPreprocessor(bool)", typeof(void), typeof(bool), fold);
		}
		[Q_SLOT("void setCaseSensitiveTags(bool)")]
		[SmokeMethod("setCaseSensitiveTags(bool)")]
		public virtual void SetCaseSensitiveTags(bool sens) {
			interceptor.Invoke("setCaseSensitiveTags$", "setCaseSensitiveTags(bool)", typeof(void), typeof(bool), sens);
		}
		[SmokeMethod("readProperties(QSettings&, const QString&)")]
		protected override bool ReadProperties(QSettings qs, string prefix) {
			return (bool) interceptor.Invoke("readProperties#$", "readProperties(QSettings&, const QString&)", typeof(bool), typeof(QSettings), qs, typeof(string), prefix);
		}
		[SmokeMethod("writeProperties(QSettings&, const QString&) const")]
		protected override bool WriteProperties(QSettings qs, string prefix) {
			return (bool) interceptor.Invoke("writeProperties#$", "writeProperties(QSettings&, const QString&) const", typeof(bool), typeof(QSettings), qs, typeof(string), prefix);
		}
		~QsciLexerHTML() {
			interceptor.Invoke("~QsciLexerHTML", "~QsciLexerHTML()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QsciLexerHTML", "~QsciLexerHTML()", typeof(void));
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQsciLexerHTMLSignals Emit {
			get { return (IQsciLexerHTMLSignals) Q_EMIT; }
		}
	}

	public interface IQsciLexerHTMLSignals : IQsciLexerSignals {
	}
}
