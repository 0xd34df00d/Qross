//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciLexerCSharp")]
	public class QsciLexerCSharp : QsciLexerCPP, IDisposable {
 		protected QsciLexerCSharp(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciLexerCSharp), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QsciLexerCSharp() {
			staticInterceptor = new SmokeInvocation(typeof(QsciLexerCSharp), null);
		}
		public QsciLexerCSharp(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerCSharp#", "QsciLexerCSharp(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QsciLexerCSharp() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerCSharp", "QsciLexerCSharp()", typeof(void));
		}
		[SmokeMethod("language() const")]
		public override string Language() {
			return (string) interceptor.Invoke("language", "language() const", typeof(string));
		}
		[SmokeMethod("defaultColor(int) const")]
		public override QColor DefaultColor(int style) {
			return (QColor) interceptor.Invoke("defaultColor$", "defaultColor(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("defaultEolFill(int) const")]
		public override bool DefaultEolFill(int style) {
			return (bool) interceptor.Invoke("defaultEolFill$", "defaultEolFill(int) const", typeof(bool), typeof(int), style);
		}
		[SmokeMethod("defaultFont(int) const")]
		public override QFont DefaultFont(int style) {
			return (QFont) interceptor.Invoke("defaultFont$", "defaultFont(int) const", typeof(QFont), typeof(int), style);
		}
		[SmokeMethod("defaultPaper(int) const")]
		public override QColor DefaultPaper(int style) {
			return (QColor) interceptor.Invoke("defaultPaper$", "defaultPaper(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("keywords(int) const")]
		public override string Keywords(int set) {
			return (string) interceptor.Invoke("keywords$", "keywords(int) const", typeof(string), typeof(int), set);
		}
		[SmokeMethod("description(int) const")]
		public override string Description(int style) {
			return (string) interceptor.Invoke("description$", "description(int) const", typeof(string), typeof(int), style);
		}
		~QsciLexerCSharp() {
			interceptor.Invoke("~QsciLexerCSharp", "~QsciLexerCSharp()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QsciLexerCSharp", "~QsciLexerCSharp()", typeof(void));
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQsciLexerCSharpSignals Emit {
			get { return (IQsciLexerCSharpSignals) Q_EMIT; }
		}
	}

	public interface IQsciLexerCSharpSignals : IQsciLexerCPPSignals {
	}
}
