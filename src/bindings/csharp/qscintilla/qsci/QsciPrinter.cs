//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciPrinter")]
	public class QsciPrinter : QPrinter, IDisposable {
 		protected QsciPrinter(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciPrinter), this);
		}
		public QsciPrinter(QPrinter.PrinterMode mode) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciPrinter$", "QsciPrinter(QPrinter::PrinterMode)", typeof(void), typeof(QPrinter.PrinterMode), mode);
		}
		public QsciPrinter() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciPrinter", "QsciPrinter()", typeof(void));
		}
		[SmokeMethod("formatPage(QPainter&, bool, QRect&, int)")]
		public virtual void FormatPage(QPainter painter, bool drawing, QRect area, int pagenr) {
			interceptor.Invoke("formatPage#$#$", "formatPage(QPainter&, bool, QRect&, int)", typeof(void), typeof(QPainter), painter, typeof(bool), drawing, typeof(QRect), area, typeof(int), pagenr);
		}
		public int Magnification() {
			return (int) interceptor.Invoke("magnification", "magnification() const", typeof(int));
		}
		[SmokeMethod("setMagnification(int)")]
		public virtual void SetMagnification(int magnification) {
			interceptor.Invoke("setMagnification$", "setMagnification(int)", typeof(void), typeof(int), magnification);
		}
		[SmokeMethod("printRange(QsciScintillaBase*, int, int)")]
		public new virtual int PrintRange(QsciScintillaBase qsb, int from, int to) {
			return (int) interceptor.Invoke("printRange#$$", "printRange(QsciScintillaBase*, int, int)", typeof(int), typeof(QsciScintillaBase), qsb, typeof(int), from, typeof(int), to);
		}
		[SmokeMethod("printRange(QsciScintillaBase*, int)")]
		public new virtual int PrintRange(QsciScintillaBase qsb, int from) {
			return (int) interceptor.Invoke("printRange#$", "printRange(QsciScintillaBase*, int)", typeof(int), typeof(QsciScintillaBase), qsb, typeof(int), from);
		}
		[SmokeMethod("printRange(QsciScintillaBase*)")]
		public new virtual int PrintRange(QsciScintillaBase qsb) {
			return (int) interceptor.Invoke("printRange#", "printRange(QsciScintillaBase*)", typeof(int), typeof(QsciScintillaBase), qsb);
		}
		public QsciScintilla.WrapMode WrapMode() {
			return (QsciScintilla.WrapMode) interceptor.Invoke("wrapMode", "wrapMode() const", typeof(QsciScintilla.WrapMode));
		}
		[SmokeMethod("setWrapMode(QsciScintilla::WrapMode)")]
		public virtual void SetWrapMode(QsciScintilla.WrapMode wmode) {
			interceptor.Invoke("setWrapMode$", "setWrapMode(QsciScintilla::WrapMode)", typeof(void), typeof(QsciScintilla.WrapMode), wmode);
		}
		~QsciPrinter() {
			interceptor.Invoke("~QsciPrinter", "~QsciPrinter()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QsciPrinter", "~QsciPrinter()", typeof(void));
		}
	}
}
