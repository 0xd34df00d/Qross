//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciLexerDiff")]
	public class QsciLexerDiff : QsciLexer, IDisposable {
 		protected QsciLexerDiff(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciLexerDiff), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QsciLexerDiff() {
			staticInterceptor = new SmokeInvocation(typeof(QsciLexerDiff), null);
		}
		public const int Default = 0;
		public const int Comment = 1;
		public const int Command = 2;
		public const int Header = 3;
		public const int Position = 4;
		public const int LineRemoved = 5;
		public const int LineAdded = 6;

		public QsciLexerDiff(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerDiff#", "QsciLexerDiff(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QsciLexerDiff() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerDiff", "QsciLexerDiff()", typeof(void));
		}
		[SmokeMethod("language() const")]
		public override string Language() {
			return (string) interceptor.Invoke("language", "language() const", typeof(string));
		}
		[SmokeMethod("lexer() const")]
		public override string Lexer() {
			return (string) interceptor.Invoke("lexer", "lexer() const", typeof(string));
		}
		[SmokeMethod("wordCharacters() const")]
		public override string WordCharacters() {
			return (string) interceptor.Invoke("wordCharacters", "wordCharacters() const", typeof(string));
		}
		[SmokeMethod("defaultColor(int) const")]
		public override QColor DefaultColor(int style) {
			return (QColor) interceptor.Invoke("defaultColor$", "defaultColor(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("description(int) const")]
		public override string Description(int style) {
			return (string) interceptor.Invoke("description$", "description(int) const", typeof(string), typeof(int), style);
		}
		~QsciLexerDiff() {
			interceptor.Invoke("~QsciLexerDiff", "~QsciLexerDiff()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QsciLexerDiff", "~QsciLexerDiff()", typeof(void));
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQsciLexerDiffSignals Emit {
			get { return (IQsciLexerDiffSignals) Q_EMIT; }
		}
	}

	public interface IQsciLexerDiffSignals : IQsciLexerSignals {
	}
}
