//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciCommandSet")]
	public class QsciCommandSet : Object {
		protected SmokeInvocation interceptor = null;
		private IntPtr smokeObject;
		protected QsciCommandSet(Type dummy) {}
		protected void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciCommandSet), this);
		}
		// QList<QsciCommand*>& commands(); >>>> NOT CONVERTED
		public bool ReadSettings(QSettings qs, string prefix) {
			return (bool) interceptor.Invoke("readSettings#$", "readSettings(QSettings&, const char*)", typeof(bool), typeof(QSettings), qs, typeof(string), prefix);
		}
		public bool ReadSettings(QSettings qs) {
			return (bool) interceptor.Invoke("readSettings#", "readSettings(QSettings&)", typeof(bool), typeof(QSettings), qs);
		}
		public bool WriteSettings(QSettings qs, string prefix) {
			return (bool) interceptor.Invoke("writeSettings#$", "writeSettings(QSettings&, const char*)", typeof(bool), typeof(QSettings), qs, typeof(string), prefix);
		}
		public bool WriteSettings(QSettings qs) {
			return (bool) interceptor.Invoke("writeSettings#", "writeSettings(QSettings&)", typeof(bool), typeof(QSettings), qs);
		}
		public void ClearKeys() {
			interceptor.Invoke("clearKeys", "clearKeys()", typeof(void));
		}
		public void ClearAlternateKeys() {
			interceptor.Invoke("clearAlternateKeys", "clearAlternateKeys()", typeof(void));
		}
	}
}
