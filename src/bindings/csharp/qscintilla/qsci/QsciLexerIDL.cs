//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciLexerIDL")]
	public class QsciLexerIDL : QsciLexerCPP, IDisposable {
 		protected QsciLexerIDL(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciLexerIDL), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QsciLexerIDL() {
			staticInterceptor = new SmokeInvocation(typeof(QsciLexerIDL), null);
		}
		public QsciLexerIDL(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerIDL#", "QsciLexerIDL(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QsciLexerIDL() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerIDL", "QsciLexerIDL()", typeof(void));
		}
		[SmokeMethod("language() const")]
		public override string Language() {
			return (string) interceptor.Invoke("language", "language() const", typeof(string));
		}
		[SmokeMethod("defaultColor(int) const")]
		public override QColor DefaultColor(int style) {
			return (QColor) interceptor.Invoke("defaultColor$", "defaultColor(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("keywords(int) const")]
		public override string Keywords(int set) {
			return (string) interceptor.Invoke("keywords$", "keywords(int) const", typeof(string), typeof(int), set);
		}
		[SmokeMethod("description(int) const")]
		public override string Description(int style) {
			return (string) interceptor.Invoke("description$", "description(int) const", typeof(string), typeof(int), style);
		}
		~QsciLexerIDL() {
			interceptor.Invoke("~QsciLexerIDL", "~QsciLexerIDL()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QsciLexerIDL", "~QsciLexerIDL()", typeof(void));
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQsciLexerIDLSignals Emit {
			get { return (IQsciLexerIDLSignals) Q_EMIT; }
		}
	}

	public interface IQsciLexerIDLSignals : IQsciLexerCPPSignals {
	}
}
