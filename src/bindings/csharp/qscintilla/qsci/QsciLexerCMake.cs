//Auto-generated by kalyptus. DO NOT EDIT.
namespace QScintilla {

	using System;
	using Qyoto;

	[SmokeClass("QsciLexerCMake")]
	public class QsciLexerCMake : QsciLexer, IDisposable {
 		protected QsciLexerCMake(Type dummy) : base((Type) null) {}
		protected new void CreateProxy() {
			interceptor = new SmokeInvocation(typeof(QsciLexerCMake), this);
		}
		private static SmokeInvocation staticInterceptor = null;
		static QsciLexerCMake() {
			staticInterceptor = new SmokeInvocation(typeof(QsciLexerCMake), null);
		}
		public const int Default = 0;
		public const int Comment = 1;
		public const int String = 2;
		public const int StringLeftQuote = 3;
		public const int StringRightQuote = 4;
		public const int Function = 5;
		public const int Variable = 6;
		public const int Label = 7;
		public const int KeywordSet3 = 8;
		public const int BlockWhile = 9;
		public const int BlockForeach = 10;
		public const int BlockIf = 11;
		public const int BlockMacro = 12;
		public const int StringVariable = 13;
		public const int Number = 14;

		public QsciLexerCMake(QObject parent) : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerCMake#", "QsciLexerCMake(QObject*)", typeof(void), typeof(QObject), parent);
		}
		public QsciLexerCMake() : this((Type) null) {
			CreateProxy();
			interceptor.Invoke("QsciLexerCMake", "QsciLexerCMake()", typeof(void));
		}
		[SmokeMethod("language() const")]
		public override string Language() {
			return (string) interceptor.Invoke("language", "language() const", typeof(string));
		}
		[SmokeMethod("lexer() const")]
		public override string Lexer() {
			return (string) interceptor.Invoke("lexer", "lexer() const", typeof(string));
		}
		[SmokeMethod("defaultColor(int) const")]
		public override QColor DefaultColor(int style) {
			return (QColor) interceptor.Invoke("defaultColor$", "defaultColor(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("defaultFont(int) const")]
		public override QFont DefaultFont(int style) {
			return (QFont) interceptor.Invoke("defaultFont$", "defaultFont(int) const", typeof(QFont), typeof(int), style);
		}
		[SmokeMethod("defaultPaper(int) const")]
		public override QColor DefaultPaper(int style) {
			return (QColor) interceptor.Invoke("defaultPaper$", "defaultPaper(int) const", typeof(QColor), typeof(int), style);
		}
		[SmokeMethod("keywords(int) const")]
		public override string Keywords(int set) {
			return (string) interceptor.Invoke("keywords$", "keywords(int) const", typeof(string), typeof(int), set);
		}
		[SmokeMethod("description(int) const")]
		public override string Description(int style) {
			return (string) interceptor.Invoke("description$", "description(int) const", typeof(string), typeof(int), style);
		}
		[SmokeMethod("refreshProperties()")]
		public override void RefreshProperties() {
			interceptor.Invoke("refreshProperties", "refreshProperties()", typeof(void));
		}
		public bool FoldAtElse() {
			return (bool) interceptor.Invoke("foldAtElse", "foldAtElse() const", typeof(bool));
		}
		[Q_SLOT("void setFoldAtElse(bool)")]
		[SmokeMethod("setFoldAtElse(bool)")]
		public virtual void SetFoldAtElse(bool fold) {
			interceptor.Invoke("setFoldAtElse$", "setFoldAtElse(bool)", typeof(void), typeof(bool), fold);
		}
		[SmokeMethod("readProperties(QSettings&, const QString&)")]
		protected override bool ReadProperties(QSettings qs, string prefix) {
			return (bool) interceptor.Invoke("readProperties#$", "readProperties(QSettings&, const QString&)", typeof(bool), typeof(QSettings), qs, typeof(string), prefix);
		}
		[SmokeMethod("writeProperties(QSettings&, const QString&) const")]
		protected override bool WriteProperties(QSettings qs, string prefix) {
			return (bool) interceptor.Invoke("writeProperties#$", "writeProperties(QSettings&, const QString&) const", typeof(bool), typeof(QSettings), qs, typeof(string), prefix);
		}
		~QsciLexerCMake() {
			interceptor.Invoke("~QsciLexerCMake", "~QsciLexerCMake()", typeof(void));
		}
		public new void Dispose() {
			interceptor.Invoke("~QsciLexerCMake", "~QsciLexerCMake()", typeof(void));
		}
		public static new string Tr(string s, string c) {
			return (string) staticInterceptor.Invoke("tr$$", "tr(const char*, const char*)", typeof(string), typeof(string), s, typeof(string), c);
		}
		public static new string Tr(string s) {
			return (string) staticInterceptor.Invoke("tr$", "tr(const char*)", typeof(string), typeof(string), s);
		}
		protected new IQsciLexerCMakeSignals Emit {
			get { return (IQsciLexerCMakeSignals) Q_EMIT; }
		}
	}

	public interface IQsciLexerCMakeSignals : IQsciLexerSignals {
	}
}
