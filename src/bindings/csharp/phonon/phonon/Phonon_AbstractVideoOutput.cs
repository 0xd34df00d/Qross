//Auto-generated by kalyptus. DO NOT EDIT.
namespace Phonon {
    using Phonon;
    using System;
    using Qyoto;

    public interface IAbstractVideoOutput : IMediaNode {
    }
    /// <remarks> \class AbstractVideoOutput abstractvideooutput.h Phonon/AbstractVideoOutput
    ///  \brief Common base class for all video outputs.
    ///  \see VideoWidget
    ///      </remarks>        <short>   \class AbstractVideoOutput abstractvideooutput.</short>
    [SmokeClass("Phonon::AbstractVideoOutput")]
    public abstract class AbstractVideoOutput : Phonon.MediaNode {
        protected AbstractVideoOutput(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(AbstractVideoOutput), this);
        }
        // Phonon::AbstractVideoOutput* AbstractVideoOutput(Phonon::AbstractVideoOutputPrivate& arg1); >>>> NOT CONVERTED
        /// <remarks>
        ///  \internal
        ///  Constructor that is called from derived classes.
        ///  \param d the private object
        ///              </remarks>        <short>    \internal  Constructor that is called from derived classes.</short>
    }
}
