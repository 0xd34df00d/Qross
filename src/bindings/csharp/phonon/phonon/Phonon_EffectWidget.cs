//Auto-generated by kalyptus. DO NOT EDIT.
namespace Phonon {
    using Phonon;
    using System;
    using Qyoto;
    /// <remarks> \class EffectWidget effectwidget.h Phonon/EffectWidget
    ///  \brief Widget to control the parameters of an Effect.
    ///  \ingroup PhononWidgets
    ///  \ingroup PhononEffects
    ///  \author Matthias Kretz <kretz@kde.org>
    ///      </remarks>        <short>   \class EffectWidget effectwidget.</short>
    [SmokeClass("Phonon::EffectWidget")]
    public class EffectWidget : QWidget, IDisposable {
        protected EffectWidget(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(EffectWidget), this);
        }
        public EffectWidget(Phonon.Effect effect, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("EffectWidget##", "EffectWidget(Phonon::Effect*, QWidget*)", typeof(void), typeof(Phonon.Effect), effect, typeof(QWidget), parent);
        }
        public EffectWidget(Phonon.Effect effect) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("EffectWidget#", "EffectWidget(Phonon::Effect*)", typeof(void), typeof(Phonon.Effect), effect);
        }
        ~EffectWidget() {
            interceptor.Invoke("~EffectWidget", "~EffectWidget()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~EffectWidget", "~EffectWidget()", typeof(void));
        }
        protected new IEffectWidgetSignals Emit {
            get { return (IEffectWidgetSignals) Q_EMIT; }
        }
    }

    public interface IEffectWidgetSignals : IQWidgetSignals {
    }
}
