//Auto-generated by kalyptus. DO NOT EDIT.
namespace Phonon {
    using Phonon;
    using System;
    using Qyoto;
    /// <remarks> \class SeekSlider seekslider.h Phonon/SeekSlider
    ///  \short Widget providing a slider for seeking in MediaObject objects.
    ///  \ingroup PhononWidgets
    ///  \author Matthias Kretz <kretz@kde.org>
    ///  </remarks>        <short>   \class SeekSlider seekslider.</short>
    [SmokeClass("Phonon::SeekSlider")]
    public class SeekSlider : QWidget, IDisposable {
        protected SeekSlider(Type dummy) : base((Type) null) {}
        protected new void CreateProxy() {
            interceptor = new SmokeInvocation(typeof(SeekSlider), this);
        }
        [Q_PROPERTY("bool", "iconVisible")]
        public bool IconVisible {
            get { return (bool) interceptor.Invoke("isIconVisible", "isIconVisible()", typeof(bool)); }
            set { interceptor.Invoke("setIconVisible$", "setIconVisible(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("bool", "tracking")]
        public bool Tracking {
            get { return (bool) interceptor.Invoke("hasTracking", "hasTracking()", typeof(bool)); }
            set { interceptor.Invoke("setTracking$", "setTracking(bool)", typeof(void), typeof(bool), value); }
        }
        [Q_PROPERTY("int", "pageStep")]
        public int PageStep {
            get { return (int) interceptor.Invoke("pageStep", "pageStep()", typeof(int)); }
            set { interceptor.Invoke("setPageStep$", "setPageStep(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("int", "singleStep")]
        public int SingleStep {
            get { return (int) interceptor.Invoke("singleStep", "singleStep()", typeof(int)); }
            set { interceptor.Invoke("setSingleStep$", "setSingleStep(int)", typeof(void), typeof(int), value); }
        }
        [Q_PROPERTY("Qt::Orientation", "orientation")]
        public new Qt.Orientation Orientation {
            get { return (Qt.Orientation) interceptor.Invoke("orientation", "orientation()", typeof(Qt.Orientation)); }
            set { interceptor.Invoke("setOrientation$", "setOrientation(Qt::Orientation)", typeof(void), typeof(Qt.Orientation), value); }
        }
        [Q_PROPERTY("QSize", "iconSize")]
        public QSize IconSize {
            get { return (QSize) interceptor.Invoke("iconSize", "iconSize()", typeof(QSize)); }
            set { interceptor.Invoke("setIconSize#", "setIconSize(QSize)", typeof(void), typeof(QSize), value); }
        }
        /// <remarks>
        ///  Constructs a seek slider widget with the given <pre>parent</pre>.
        ///          </remarks>        <short>    Constructs a seek slider widget with the given \p parent.</short>
        public SeekSlider(QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("SeekSlider#", "SeekSlider(QWidget*)", typeof(void), typeof(QWidget), parent);
        }
        public SeekSlider() : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("SeekSlider", "SeekSlider()", typeof(void));
        }
        public SeekSlider(Phonon.MediaObject media, QWidget parent) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("SeekSlider##", "SeekSlider(Phonon::MediaObject*, QWidget*)", typeof(void), typeof(Phonon.MediaObject), media, typeof(QWidget), parent);
        }
        public SeekSlider(Phonon.MediaObject media) : this((Type) null) {
            CreateProxy();
            interceptor.Invoke("SeekSlider#", "SeekSlider(Phonon::MediaObject*)", typeof(void), typeof(Phonon.MediaObject), media);
        }
        public Phonon.MediaObject MediaObject() {
            return (Phonon.MediaObject) interceptor.Invoke("mediaObject", "mediaObject() const", typeof(Phonon.MediaObject));
        }
        [Q_SLOT("void setOrientation(Qt::Orientation)")]
        public void SetOrientation(Qt.Orientation arg1) {
            interceptor.Invoke("setOrientation$", "setOrientation(Qt::Orientation)", typeof(void), typeof(Qt.Orientation), arg1);
        }
        [Q_SLOT("void setIconVisible(bool)")]
        public void SetIconVisible(bool arg1) {
            interceptor.Invoke("setIconVisible$", "setIconVisible(bool)", typeof(void), typeof(bool), arg1);
        }
        [Q_SLOT("void setIconSize(QSize)")]
        public void SetIconSize(QSize size) {
            interceptor.Invoke("setIconSize#", "setIconSize(const QSize&)", typeof(void), typeof(QSize), size);
        }
        /// <remarks>
        ///  Sets the media object to be controlled by this slider.
        ///          </remarks>        <short>    Sets the media object to be controlled by this slider.</short>
        [Q_SLOT("void setMediaObject(MediaObject*)")]
        public void SetMediaObject(Phonon.MediaObject arg1) {
            interceptor.Invoke("setMediaObject#", "setMediaObject(Phonon::MediaObject*)", typeof(void), typeof(Phonon.MediaObject), arg1);
        }
        ~SeekSlider() {
            interceptor.Invoke("~SeekSlider", "~SeekSlider()", typeof(void));
        }
        public new void Dispose() {
            interceptor.Invoke("~SeekSlider", "~SeekSlider()", typeof(void));
        }
        protected new ISeekSliderSignals Emit {
            get { return (ISeekSliderSignals) Q_EMIT; }
        }
    }

    public interface ISeekSliderSignals : IQWidgetSignals {
    }
}
